package com.qdoc.client.ui.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import android.content.Context;
import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.URLUtil;
import android.widget.BaseAdapter;
import android.widget.ImageView;

import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
import com.qdoc.client.R;
import com.qdoc.client.model.AdvanceActivitiesDtoModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.util.StringUtils;

public class DiscoveryAdapter extends BaseAdapter {
	
	private LayoutInflater inflater;
	private List<AdvanceActivitiesDtoModel> dataList;
    
	private Context mContext;
	private DisplayImageOptions options;
	private ImageLoadingListener animateFirstListener = new AnimateFirstDisplayListener();
	
	/**
	 * @param myFansList the myFansList to set
	 */
	public void setDataModel(List<AdvanceActivitiesDtoModel> dataModel) {
		if(dataModel == null)
			this.dataList = new ArrayList<AdvanceActivitiesDtoModel>();
		else
			this.dataList = dataModel;
	}
	
	public DiscoveryAdapter(Context context,ArrayList<AdvanceActivitiesDtoModel> dataModel){
		this.dataList = new ArrayList<AdvanceActivitiesDtoModel>();
		this.mContext = context;
		this.inflater = LayoutInflater.from(context);
		options = new DisplayImageOptions.Builder()
					.showImageForEmptyUri(R.drawable.discover_advance_item_bg)
					.showImageOnFail(R.drawable.discover_advance_item_bg)
					.cacheInMemory(true)
					.cacheOnDisk(true)
					.considerExifParams(true)
					.displayer(new RoundedBitmapDisplayer(0))
					.build();
		setDataModel(dataModel);
	}
	
	public void addListData(List<AdvanceActivitiesDtoModel> dataModel){
		setDataModel(dataModel);
		notifyDataSetChanged();
	}

	@Override
	public int getCount() {
		return dataList.size();
	}

	@Override
	public Object getItem(int arg0) {
		return dataList.get(arg0);
	}

	@Override
	public long getItemId(int arg0) {
		return arg0;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		ViewHolder holder = null;
		if(convertView==null){
			holder= new ViewHolder();
			convertView = inflater.inflate(R.layout.discovery_item, null);
			holder.iv_bg = (ImageView) convertView.findViewById(R.id.iv_bg);
			holder.iv_right_bottom = (ImageView) convertView.findViewById(R.id.iv_right_bottom);
			holder.iv_left_top = (ImageView) convertView.findViewById(R.id.iv_left_top);
			convertView.setTag(holder);
		}else{
			holder = (ViewHolder) convertView.getTag();
		}
		AdvanceActivitiesDtoModel dataModel = dataList.get(position);
		if(dataModel!=null){
		   //加载活动背景图片
		   ImageLoader.getInstance().displayImage(dataModel.getActivityPicUrl(), holder.iv_bg, options, animateFirstListener);//优先使用缓存图片
		   if (URLUtil.isNetworkUrl(dataModel.getStatusPicUrl())||URLUtil.isAssetUrl(dataModel.getStatusPicUrl())) {
			   if(dataModel.getActivityName().equals(AppConstants.ACTIVITY_FANS)){
				   holder.iv_left_top.setVisibility(View.VISIBLE);
				   holder.iv_right_bottom.setVisibility(View.GONE);
				   ImageLoader.getInstance().displayImage(dataModel.getStatusPicUrl(), holder.iv_left_top);
			   }else if(dataModel.getActivityName().equals(AppConstants.INSURANCE)||dataModel.getActivityPicUrl().equals(AppConstants.GIFBAG)){
				   holder.iv_left_top.setVisibility(View.GONE);
				   holder.iv_right_bottom.setVisibility(View.VISIBLE);
				   ImageLoader.getInstance().displayImage(dataModel.getStatusPicUrl(), holder.iv_right_bottom);
			   }else{
				   holder.iv_right_bottom.setVisibility(View.VISIBLE);
				   ImageLoader.getInstance().displayImage(dataModel.getStatusPicUrl(), holder.iv_right_bottom); 
			   }
		   } else {
			   holder.iv_right_bottom.setVisibility(View.GONE);
			   holder.iv_left_top.setVisibility(View.GONE);
		   }
		}
		return convertView;
	}

	class ViewHolder{
		ImageView iv_right_bottom,iv_left_top,iv_bg;
	}
	
	private static class AnimateFirstDisplayListener extends SimpleImageLoadingListener {

		static final List<String> displayedImages = Collections.synchronizedList(new LinkedList<String>());

		@Override
		public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
			if (loadedImage != null) {
				ImageView imageView = (ImageView) view;
				boolean firstDisplay = !displayedImages.contains(imageUri);
				if (firstDisplay) {
					FadeInBitmapDisplayer.animate(imageView, 500);
					displayedImages.add(imageUri);
				}
			}
		}
	}
}
