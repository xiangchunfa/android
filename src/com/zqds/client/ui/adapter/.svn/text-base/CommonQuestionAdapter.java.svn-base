/*
 * ConsultAdapter.java
 * classes : com.qdoc.client.ui.adapter.ConsultAdapter
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-16 上午1:56:20
 */
package com.qdoc.client.ui.adapter;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

import com.qdoc.client.R;
import com.qdoc.client.model.CommonProblemDtoModel;
import com.qdoc.client.util.ListUtils;

/**
 * FileName    : CommonQuestionAdapter.java
 * Description : 客服消息常见问题适配器类
 * @Copyright  : Keai Software Co.,Ltd.Rights Reserved 
 * @Company    : 可爱医生网络技术有限公司
 * @author     : 向春发
 * @version    : 1.0 
 * Create Date : 2015-6-8 
 **/
public class CommonQuestionAdapter extends BaseAdapter {
    /**
     * TAG
     */
    private static final String TAG = CommonQuestionAdapter.class.getSimpleName();

    /**
     * view
     */
    private ArrayList<CommonProblemDtoModel> mElements;
    
    /**
     * params
     */
    private LayoutInflater mInflater;
    
    public CommonQuestionAdapter(Context context) {
        mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        mElements = new ArrayList<CommonProblemDtoModel>();
    }
    
    public void addListData(ArrayList<CommonProblemDtoModel> elementsList) {
        mElements.clear();
        mElements.addAll(elementsList);
        notifyDataSetChanged();
    }

    public void addMoreListData(ArrayList<CommonProblemDtoModel> elementsList) {
        mElements.addAll(elementsList);
        notifyDataSetChanged();
    }

    
    /**
     * 清除list中所有数据
     */
    public void clearListData() {
        mElements.clear();
        mElements = null;
    }
     /**
      * 清除list中的某一条数据
      */
    public List<CommonProblemDtoModel> removeListData(int position) {
    	mElements.remove(position);
    	notifyDataSetChanged();
    	return mElements;
    }
    
    public void notifyEmptyData() {
        mElements.clear();
        notifyDataSetChanged();
    }
    
    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return ListUtils.isEmpty(mElements) ? 0 : mElements.size();
    }
    
    @Override
    public Object getItem(int position) {
        // TODO Auto-generated method stub
        if (!ListUtils.isEmpty(mElements)) {
            int size = mElements.size();
            return mElements.get(position % size);
        } else {
            return null;
        }
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub
        ViewHolder holder = null;
        if (convertView == null) {
            holder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.listitem_common_question, null);
            holder.tv_common_problem = (TextView) convertView.findViewById(R.id.tv_common_problem);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        CommonProblemDtoModel model=mElements.get(position);
        holder.tv_common_problem.setText(model.getProblemName());
        return convertView;
    }

    private class ViewHolder {
        private TextView tv_common_problem;
    }

}