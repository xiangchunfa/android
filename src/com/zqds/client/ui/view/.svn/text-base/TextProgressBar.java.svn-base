package com.qdoc.client.ui.view;

import com.qdoc.client.R;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.ProgressBar;

public class TextProgressBar extends ProgressBar {
	
	private Paint mPaint;
	private CharSequence text;
	private int textColor;
	private float textSize;

	public TextProgressBar(Context context) {
		this(context, null);
	}

	public TextProgressBar(Context context, AttributeSet attrs) {
		this(context, attrs, 0);
	}

	public TextProgressBar(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		
		TypedArray mTypedArray = context.obtainStyledAttributes(attrs,R.styleable.TextProgressBar); 
		//获取自定义属性和默认值
		text = mTypedArray.getText(R.styleable.TextProgressBar_text);
		if(text==null)
			text = "";
		textColor = mTypedArray.getColor(R.styleable.TextProgressBar_textColor, Color.WHITE); 
		textSize = mTypedArray.getDimension(R.styleable.TextProgressBar_textSize, 15);
		initText(textColor,textSize);
		mTypedArray.recycle();
	}
	
	@Override
	protected synchronized void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		
		 Rect rect = new Rect();
         this.mPaint.getTextBounds(String.valueOf(this.text), 0, this.text.length(), rect);
         int x = (getWidth() / 2) - rect.centerX(); 
         int y = (getHeight() / 2) - rect.centerY(); 
         canvas.drawText(String.valueOf(this.text), x, y, this.mPaint);
	}
	
	@Override
	public synchronized void setProgress(int progress) {
		// TODO Auto-generated method stub
		super.setProgress(progress);
	}

	/**
	 * @return the text
	 */
	public CharSequence getText() {
		return text;
	}

	/**
	 * @param text the text to set
	 */
	public void setText(String text) {
		this.text = text;
	}

	/**
	 * @return the textColor
	 */
	public int getTextColor() {
		return textColor;
	}

	/**
	 * @param textColor the textColor to set
	 */
	public void setTextColor(int textColor) {
		this.textColor = textColor;
	}

	/**
	 * @return the textSize
	 */
	public float getTextSize() {
		return textSize;
	}

	/**
	 * @param textSize the textSize to set
	 */
	public void setTextSize(int textSize) {
		this.textSize = textSize;
	}

	//初始化画笔
	private void initText(int textColor,float textSize) {
        this.mPaint = new Paint();  
        this.mPaint.setAntiAlias(true);// 设置抗锯齿
        this.mPaint.setColor(textColor);  
        this.mPaint.setTextSize(textSize);
	}
}
