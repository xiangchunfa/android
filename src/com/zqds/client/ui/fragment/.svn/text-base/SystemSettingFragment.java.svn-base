/*
 * ConsultDetailFragment.java
 * classes : com.qdoc.client.ui.fragment.ConsultDetailFragment
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-16 上午2:00:13
 */
package com.qdoc.client.ui.fragment;

import java.io.File;
import java.text.DecimalFormat;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.db.DatabaseService;
import com.qdoc.client.download.UpdateManager;
import com.qdoc.client.helper.Global;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.BankDtoDataModel;
import com.qdoc.client.model.DoctorModel;
import com.qdoc.client.model.LogoutDataModel;
import com.qdoc.client.model.SoftwareUpgradeModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.system.QdocApplication;
import com.qdoc.client.ui.AboutAppActivity;
import com.qdoc.client.ui.AboutmeActivity;
import com.qdoc.client.ui.BankAccountEditActivitiy;
import com.qdoc.client.ui.BaseActivity;
import com.qdoc.client.ui.BindingCardSuccessActivity;
import com.qdoc.client.ui.ChangePassWordActivity;
import com.qdoc.client.ui.ClinicTimeSetActivity;
import com.qdoc.client.ui.ConsultSettingActivity;
import com.qdoc.client.ui.LoginActivity;
import com.qdoc.client.ui.SystemSettingActivity;
import com.qdoc.client.ui.dialog.HintDlg;
import com.qdoc.client.ui.dialog.HintDlg.OnDialogclickListener;
import com.qdoc.client.ui.widget.SettingGuide;
import com.qdoc.client.ui.widget.TitleBar;
import com.qdoc.client.util.DateUtil;
import com.qdoc.client.util.FileUtil;
import com.qdoc.client.util.IntentTools;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.NetworkUtils;
import com.qdoc.client.util.ToastUtils;
import com.tencent.android.tpush.XGPushManager;

/**
 * FileName    : SystemSettingFragment.java
 * Description : 系统设置类
 * @Copyright  : Keai Software Co.,Ltd.Rights Reserved 
 * @Company    : 可爱医生网络技术有限公司
 * @author     : 向春发
 * @version    : 1.0 
 * Create Date : 2015-7-9 
 **/
public class SystemSettingFragment extends BaseFragment implements OnClickListener {
	/**
	 * TAG
	 */
	public static final String TAG = SystemSettingFragment.class.getSimpleName();

	/**
	 * view
	 */
    private TextView tv_consult_setting;
    private TextView tv_clinic_time;
    private TextView tv_bank_card;
    private TextView tv_change_password;
    private RelativeLayout rl_clear_cache_layout;
    private TextView tv_cache_size;
    private RelativeLayout rly_version_update;
    private TextView tv_about_us;
    private TextView tv_log_out;
    private TitleBar mTitleBar;
    private ImageView ivNew;
    private SettingGuide sg_setting_guide;
    
	/**
	 * params
	 */
	private UpdateManager mUpdateManager;
	private DoctorModel doctorDto;// 医生对象
	private int laucherFrom;//启动来之于
	private String global_cacheSize;

	public static SystemSettingFragment newInstance(Bundle bundle) {
		final SystemSettingFragment fragment = new SystemSettingFragment();
		fragment.setArguments(bundle);
		return fragment;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		LogUtils.d(TAG, "onCreate:" + savedInstanceState);
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_system_setting, container, false);
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		initView(view);
		initListener();
		initParams();
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onActivityCreated(savedInstanceState);
	}

	private void initParams() {
		Bundle bundle = getArguments();
		if (bundle != null){
			doctorDto = (DoctorModel) bundle.getSerializable(IntentTools.EXTRA_DOCTOR_INFO);
			laucherFrom = bundle.getInt(IntentTools.EXTRA_LAUNCHER_FROM);
		}
		global_cacheSize = getCacheFileSize();
		tv_cache_size.setText(getString(R.string.current_cache_size)+global_cacheSize);
	}

	private void checkNewImageNeedVisible() {
		if(null == Global.APP_VERSION_NAME)
			Global.inits(getContext());
		HttpTaskManager.startStringRequest(DataRequestUtils
				.getUpgradeRequestParam(TAG, AppConstants.ANDROID,
						Global.APP_VERSION_NAME, AppConstants.NEW_VERSION),
				JsonParserFactory.parseBaseModel(SoftwareUpgradeModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,
							Object resultData) {
						// TODO Auto-generated method stub
						if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
							final SoftwareUpgradeModel dataModel = (SoftwareUpgradeModel) resultData;
							if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {
								if (dataModel.getNeedUp()) {
									ivNew.setVisibility(View.VISIBLE);
								} else {
									ivNew.setVisibility(View.GONE);
								}
							} else if (dataModel.getState() == ServerErrorCode.TOKEN_INVALID) {
								LoginActivity.startActivity(getActivity());
							}
							if(null!=dataModel.getDataVersionDto())
								PersonalConfig.putString(PersonalConfigKey.EXTAR_ROMATE_VERSION_NAME, dataModel.getDataVersionDto().getDataVersion());
							PersonalConfig.putString(PersonalConfigKey.EXTAR_UPGRADE_DAY_ABOUTMEFRAGMENT, DateUtil.getDate("yyyy-MM-dd"));
							PersonalConfig.asyncCommit();
						}
					}
				});
	}

	@SuppressLint("CutPasteId")
	private void initView(View view) {
		mTitleBar = (TitleBar) view.findViewById(R.id.titlebar);
		mTitleBar.setTitleInfo(R.string.setting_title, 
				R.drawable.icon_back, 0, actionBarLeftBtnListener, null,
				getResources().getColor(R.color.titlebar_bg));
		tv_log_out = (TextView) view.findViewById(R.id.tv_log_out);
		ivNew = (ImageView) view.findViewById(R.id.iv_red_dot);
		tv_bank_card = (TextView) view.findViewById(R.id.tv_bank_card);
		rl_clear_cache_layout = (RelativeLayout) view.findViewById(R.id.rl_clear_cache_layout);
		tv_cache_size = (TextView) view.findViewById(R.id.tv_cache_size);
		rly_version_update = (RelativeLayout) view.findViewById(R.id.rly_version_update);
		tv_clinic_time = (TextView) view.findViewById(R.id.tv_clinic_time);
		tv_change_password = (TextView) view.findViewById(R.id.tv_change_password);
		tv_about_us = (TextView) view.findViewById(R.id.tv_about_us);
		tv_consult_setting = (TextView) view.findViewById(R.id.tv_consult_setting);
		sg_setting_guide = (SettingGuide) view.findViewById(R.id.sg_setting_guide);
		new Handler().post(new Runnable() {
		       @Override
		       public void run() {
		    	   if (!PersonalConfig.getBoolean(PersonalConfigKey.EXTAR_SETTING_REGISTER_GUIDE, true)){
		    		   sg_setting_guide.setView(tv_consult_setting);
			    	   sg_setting_guide.showFirstGuide();
			    	   PersonalConfig.putBoolean(PersonalConfigKey.EXTAR_SETTING_REGISTER_GUIDE, true);
			    	   PersonalConfig.asyncCommit();
		    	   }
		       }
		});
	}
	
	/**
	 * 获取缓存文件夹的大小
	 * @return
	 */
	private String getCacheFileSize(){
		File cacheFile = getContext().getCacheDir();
		long cacheFileSize = FileUtil.getFolderSize(cacheFile);
		return FileUtil.getFileSize(cacheFileSize);
	}

	@Override
	public void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}

	OnClickListener actionBarLeftBtnListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			getActivity().finish();
		}
	};
	
	protected void initListener() {
		tv_consult_setting.setOnClickListener(this);
		tv_bank_card.setOnClickListener(this);
		rl_clear_cache_layout.setOnClickListener(this);
		rly_version_update.setOnClickListener(this);
		tv_clinic_time.setOnClickListener(this);
		tv_change_password.setOnClickListener(this);
		tv_about_us.setOnClickListener(this);
		tv_log_out.setOnClickListener(this);
	}

	OnClickListener actionBarRightBtnListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			AboutmeActivity activity = (AboutmeActivity) getActivity();
			if (activity == null) {
				return;
			}
			ConsultSettingActivity.startActivity(activity,
					activity.getLaucherFrom());
		}
	};

	public void onDestroy() {
		super.onDestroy();
		HttpTaskManager.stop(TAG);
	}

	@Override
	public void onClick(View view) {
		SystemSettingActivity activity = (SystemSettingActivity) getActivity();
		if (activity == null) {
			return;
		}
		switch (view.getId()) {
		case R.id.tv_consult_setting: { // 咨询设置
			ConsultSettingActivity.startActivity(activity, laucherFrom);
			break;
		}
		case R.id.tv_bank_card: {// 银行账户
			// 请求医生银行信息接口，看是否已经绑定银行卡信息
			getShowBankInfoRequest();
			break;
		}
		case R.id.tv_clinic_time:
			// 门诊时间设置
			ClinicTimeSetActivity.startActivity(activity, doctorDto);
			break;
		case R.id.rly_version_update:// 软件升级
			startUpgradeRequest();
			break;
		case R.id.tv_about_us:// 关于我们
			AboutAppActivity.startActivity(activity);
			break;
		case R.id.tv_log_out://退出登录
			exitApp();
			break;	
		case R.id.tv_change_password://修改密码
			startActivity(new Intent(getActivity(), ChangePassWordActivity.class));
			break;
		case R.id.rl_clear_cache_layout://清除缓存
			String title = getString(R.string.dialog_hint_title);
			String message = getString(R.string.sure_to_delete_cache);
    		String ok_text = getContext().getString(R.string.str_dialog_ok);
    		String cancle_text = getContext().getString(R.string.str_dialog_cancel);
    		new HintDlg(getActivity(), message, title, cancle_text, ok_text, new OnDialogclickListener() {
				
				@Override
				public void onButtonClick(int type,Dialog dialog) {
					switch (type) {
					case AppConstants.LEFT_BUTTON:
						//取消
						dialog.dismiss();
						break;
					case AppConstants.RIGHT_BUTTON:
						//确定清除缓存
						dialog.dismiss();
						Global.progressDialog = ProgressDialog.show(getContext(), null, null);
						FileUtil.deleteFolderFile(getContext().getCacheDir().getAbsolutePath(), true);
						DatabaseService dataBaseService = new DatabaseService(getContext());
						dataBaseService.deleteOldArticleIdList();
						ToastUtils.ToastShort(getContext(), "成功清除缓存"+global_cacheSize);
						tv_cache_size.setText(getString(R.string.current_cache_size)+"0.00KB");
						Global.progressDialog.dismiss();
						break;
					}
				}
			},R.layout.print_card_dialog).show();
			break;
	   }
	}
	
	private void exitApp() {
		BaseActivity act = (BaseActivity) getActivity();
		if (act == null) {
			return;
		}
		getQuitAppRequest();
		Global.quitAccount();
		XGPushManager.unregisterPush(act);// 反注册成功
		ToastUtils.ToastShort(act, "注销成功");
		LoginActivity.startActivity(act);
		//注销账号，清空抢单单号列表
		if(Global.consultLists!=null)
			Global.consultLists.removeAll(Global.consultLists);
		BaseActivity.closeApplication();
	}
	
	private void getQuitAppRequest() {
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);

		HttpTaskManager.startStringRequest(
				DataRequestUtils.getLogoutRequestParam(TAG, token),
				JsonParserFactory.parseBaseModel(LogoutDataModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,
							Object resultData) {
						LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
					}
				});
	}

	@Override
	public String getReqestTag() {
		// TODO Auto-generated method stub
		return TAG;
	}

	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		boolean isCall = PersonalConfig.getString(PersonalConfigKey.EXTAR_UPGRADE_DAY_ABOUTMEFRAGMENT).equals(DateUtil.getDate("yyyy-MM-dd"));//当天是否调用过app日志接口
		if(!isCall){
			checkNewImageNeedVisible();
		}else{
			if(null == Global.APP_VERSION_NAME)
				Global.inits(getContext());
			int remote_versionName = getVername(PersonalConfig.getString(PersonalConfigKey.EXTAR_ROMATE_VERSION_NAME));
			int local_versionName = getVername(Global.APP_VERSION_NAME);
			if(remote_versionName>local_versionName){
				ivNew.setVisibility(View.VISIBLE);
			}else{
				ivNew.setVisibility(View.GONE);
			}
		}
			
	}
	
	private int getVername(String vername){
		int int_versionName = 0;
		if(TextUtils.isEmpty(vername))
			return int_versionName;
		String[] vernameStrs = vername.split("\\.");
		int lenth = vernameStrs.length;
		if(lenth!=3)
			return int_versionName;
		int_versionName = Integer.parseInt(vernameStrs[2])+Integer.parseInt(vernameStrs[1])*100+Integer.parseInt(vernameStrs[0])*10000;
		return int_versionName;
	}

	/**
	 * 获取医生银行卡信息
	 */
	private void getShowBankInfoRequest() {
		// 判断网络是否可用
		if (!NetworkUtils.isOnline(QdocApplication.getInstance())) {
			ToastUtils.ToastShort(getContext(), R.string.network_unavaible);
			return;
		}
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		Global.progressDialog = ProgressDialog.show(getActivity(), null,getActivity().getString(R.string.loading), true, true);
		HttpTaskManager.startStringRequest(
				DataRequestUtils.getShowBankInfoequestParam(TAG, token),
				JsonParserFactory.parseBaseModel(BankDtoDataModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,Object resultData) {
						Global.progressDialog.dismiss();
						if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
							final BankDtoDataModel dataModel = (BankDtoDataModel) resultData;
							if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {
								if (!TextUtils.isEmpty(dataModel.getBankInfo().getAccountNo()) && !TextUtils.isEmpty(dataModel.getBankInfo().getBankName())) {
									// 已经绑定银行卡
									BindingCardSuccessActivity.startActivity(getContext(), dataModel, doctorDto);
								} else {
									// 没有绑定银行卡
									BankAccountEditActivitiy.startActivity(getActivity(),dataModel, doctorDto);
								}
							} else if (dataModel.getState() == ServerErrorCode.TOKEN_INVALID) {
								LoginActivity.startActivity(getActivity());
							} else {
								ToastUtils.ToastShort(getContext(),dataModel.getErrorMsg());
							}
						} else {
							if (resultData == null) {
								ToastUtils.ToastShort(getContext().getApplicationContext(),R.string.network_error);
							} else {
								ToastUtils.ToastShort(getContext().getApplicationContext(),(String) resultData);
							}
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode+ "resultData ::: " + resultData);
					}
				});
	}

	/**
	 * 软件升级
	 */
	public void startUpgradeRequest() {
 	   if(!NetworkUtils.isOnline(QdocApplication.getInstance())){
		   ToastUtils.ToastShort(getActivity(), R.string.network_unavaible);
		   return;
	   }
    	if(Global.APP_VERSION_NAME==null){
    		Global.APP_VERSION_NAME = Global.getVerName(getContext());
    	}
		HttpTaskManager.startStringRequest(DataRequestUtils.getUpgradeRequestParam(TAG, AppConstants.ANDROID,Global.APP_VERSION_NAME, AppConstants.NEW_VERSION),
				JsonParserFactory.parseBaseModel(SoftwareUpgradeModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,Object resultData) {
						// TODO Auto-generated method stub
						if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
							final SoftwareUpgradeModel dataModel = (SoftwareUpgradeModel) resultData;
							if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {
								if (dataModel.getNeedUp()) {
									mUpdateManager = new UpdateManager(
											getActivity(), false);
									mUpdateManager.checkUpdateInfo(
											dataModel.getDataVersionDto().getDeviceUrl(), dataModel.getDataVersionDto().getDataVersion(),
											dataModel.getDataVersionDto().getDeviceImprint(),
											dataModel.getDataVersionDto().isForcedUpdates());
								} else {
									String nowIsNewVersionMsg = getString(R.string.now_is_new_version);
									ToastUtils.ToastLong(getActivity(),nowIsNewVersionMsg);
								}

							} else if (dataModel.getState() == ServerErrorCode.TOKEN_INVALID) {
								LoginActivity.startActivity(getActivity());
							} else {
								ToastUtils.ToastShort(getActivity(),dataModel.getErrorMsg());
							}
						} else {
							Toast.makeText(getActivity(), "软件升级失败，请稍后重试",Toast.LENGTH_LONG).show();
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode+ "resultData ::: " + resultData);
					}
				});
	}

	@Override
	public void onAttach(Activity activity) {
		// TODO Auto-generated method stub
		super.onAttach(activity);
	}

	@Override
	public void onDestroyView() {
		// TODO Auto-generated method stub
		super.onDestroyView();
	}

	@Override
	public void onDetach() {
		// TODO Auto-generated method stub
		super.onDetach();
	}

	@Override
	public void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
	}
	

	@Override
	public void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
	}
}
