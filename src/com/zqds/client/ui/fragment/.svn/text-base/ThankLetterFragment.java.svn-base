/*
 * ThankLetterFragment.java
 * classes : com.qdoc.client.ui.fragment.ThankLetterFragment
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-20 下午5:36:48
 */
package com.qdoc.client.ui.fragment;

import java.lang.ref.WeakReference;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.ConsultListModel;
import com.qdoc.client.model.ConsultModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.ui.LoginActivity;
import com.qdoc.client.ui.adapter.ThankletterListAdapter;
import com.qdoc.client.ui.widget.ErrorMaskView;
import com.qdoc.client.ui.widget.PullListMaskController;
import com.qdoc.client.ui.widget.PullListMaskController.ListViewState;
import com.qdoc.client.ui.widget.PullRefreshView;
import com.qdoc.client.ui.widget.PullRefreshView.OnClickFootViewListener;
import com.qdoc.client.ui.widget.PullRefreshView.OnRefreshListener;
import com.qdoc.client.ui.widget.TitleBar;
import com.qdoc.client.util.ListUtils;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.ToastUtils;

/**
 * com.qdoc.client.ui.fragment.ThankLetterFragment
 * 
 * @author xiangyutian <br/>
 *         create at 2014-7-20 下午5:36:48
 */
public class ThankLetterFragment extends BaseFragment {
    /**
     * TAG
     */
    public static final String TAG = ThankLetterFragment.class.getSimpleName();

    /**
     * view
     */
    private TitleBar mTitleBar;
    private PullRefreshView mListView;
    private PullListMaskController mViewController;

    /**
     * params
     */
    private ThankletterListAdapter mAdapter;
    private int pageIndex = 1;
    private InnerHandler mHandler = new InnerHandler(this);
    private final int DELAYMILLIS = 200;
    private int pageSize;

    public static ThankLetterFragment newInstance(Bundle bundle) {
        final ThankLetterFragment fragment = new ThankLetterFragment();
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        return inflater.inflate(R.layout.fragment_thankletter_list, container, false);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initView(view);
        initListener();
        initParams();
    }

    private void initParams() {
        // TODO Auto-generated method stub
        mAdapter = new ThankletterListAdapter(getContext());
        mListView.setAdapter(mAdapter);
        startThankLetterInitRequest();
    }

    private void initView(View view) {
        // TODO Auto-generated method stub
        mTitleBar = (TitleBar) view.findViewById(R.id.titlebar);
        mTitleBar.setTitleInfo(R.string.msg_thankletter, R.drawable.icon_back, 0, actionBarLeftBtnListener, null,
                getResources().getColor(R.color.titlebar_bg));
        mListView = (PullRefreshView) view.findViewById(R.id.listView);
        // 自定义emptyview
        ErrorMaskView maskView = (ErrorMaskView) view.findViewById(R.id.maskView);
        mViewController = new PullListMaskController(mListView, maskView);
        mViewController.showViewStatus(ListViewState.EMPTY_LOADING);
    }


    private void initListener() {
        // TODO Auto-generated method stub
        mViewController.setOnRetryClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                // TODO Auto-generated method stub
                // 避免频繁发送请求
                mHandler.removeCallbacks(taskRunnable);
                mHandler.postDelayed(taskRunnable, DELAYMILLIS);
            }
        });
        mViewController.setOnRefreshListener(new OnRefreshListener() {

            @Override
            public void onRefresh() {
                // TODO Auto-generated method stub
                startThankLetterRefreshRequest();
            }
        });
        mViewController.setOnLoadMoreListener(new OnClickFootViewListener() {

            @Override
            public void onClickFootView() {
                // TODO Auto-generated method stub
                startThankLetterLoadMoreRequest();
            }
        });
    }

    private Runnable taskRunnable = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            startThankLetterInitRequest();
        }
    };

    public void startThankLetterInitRequest() {
        pageIndex = 1;
        HttpTaskManager.startStringRequest(DataRequestUtils.getThankListRequestParam(TAG,
                PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN), pageIndex, pageSize),
                JsonParserFactory.parseBaseModel(ConsultListModel.class), new IResultReceiver() {

                    @Override
                    public void onReceiveResult(int resultCode, Object resultData) {
                        // TODO Auto-generated method stub
                        if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
                            final ConsultListModel dataModel = (ConsultListModel) resultData;
                            if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {

                            if ((dataModel != null) && (dataModel.getPager() != null)
                                    && (!ListUtils.isEmpty(dataModel.getPager().getElements()))) {
                                ConsultModel pager = dataModel.getPager();
                                mAdapter.addListData(pager.getElements());

                                mViewController.showViewStatus(ListViewState.LIST_NORMAL_HAS_MORE);
                            } else {
                                mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无感谢信，请点击刷新");
                            }
                        }else if(dataModel.getState() == ServerErrorCode.TOKEN_INVALID){
                            LoginActivity.startActivity(getActivity());
    					}
                        } else {
                            if (resultData == null) {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), R.string.network_error);
                            } else {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), (String) resultData);
                            }
                            mViewController.showViewStatus(ListViewState.EMPTY_RETRY);
                        }
                        LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
                    }
                });
    }

    private void startThankLetterRefreshRequest() {
        pageIndex = 1;
        HttpTaskManager.startStringRequest(DataRequestUtils.getThankListRequestParam(TAG,
                PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN), pageIndex, pageSize),
                JsonParserFactory.parseBaseModel(ConsultListModel.class), new IResultReceiver() {

                    @Override
                    public void onReceiveResult(int resultCode, Object resultData) {
                        // TODO Auto-generated method stub
                        if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
                            final ConsultListModel dataModel = (ConsultListModel) resultData;
                            if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {
                            if ((dataModel != null) && (dataModel.getPager() != null)
                                    && (!ListUtils.isEmpty(dataModel.getPager().getElements()))) {
                                ConsultModel pager = dataModel.getPager();
                                mAdapter.addListData(pager.getElements());

                                mViewController.showViewStatus(ListViewState.LIST_REFRESH_COMPLETE);
                            } else {
                                mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无感谢信，请点击刷新");
                            }
                         	  }else if(dataModel.getState() == ServerErrorCode.TOKEN_INVALID){
                                  LoginActivity.startActivity(getActivity());
            					}
                        } else {
                            if (resultData == null) {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), R.string.network_error);
                            } else {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), (String) resultData);
                            }
                            mViewController.showViewStatus(ListViewState.EMPTY_RETRY);
                        }
                        LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
                    }
                });
    }

    private void startThankLetterLoadMoreRequest() {
        HttpTaskManager.startStringRequest(DataRequestUtils.getThankListRequestParam(TAG,
                PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN), ++pageIndex, pageSize),
                JsonParserFactory.parseBaseModel(ConsultListModel.class), new IResultReceiver() {

                    @Override
                    public void onReceiveResult(int resultCode, Object resultData) {
                        // TODO Auto-generated method stub
                        if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
                            final ConsultListModel dataModel = (ConsultListModel) resultData;
                            if (dataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS) {
                            if ((dataModel != null) && (dataModel.getPager() != null)
                                    && (!ListUtils.isEmpty(dataModel.getPager().getElements()))) {
                                ConsultModel pager = dataModel.getPager();
                                mAdapter.addMoreListData(pager.getElements());

                                mViewController.showViewStatus(ListViewState.LIST_NORMAL_HAS_MORE);
                            } else {
                                mViewController.showViewStatus(ListViewState.LIST_NO_MORE);
                            }
                  	  }else if(dataModel.getState() == ServerErrorCode.TOKEN_INVALID){
                          LoginActivity.startActivity(getActivity());
    					}
                        } else {
                            if (resultData == null) {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), R.string.network_error);
                            } else {
                                ToastUtils.ToastShort(getActivity().getApplicationContext(), (String) resultData);
                            }
                            mViewController.showViewStatus(ListViewState.LIST_RETRY);
                        }
                        LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
                    }
                });
    }

    OnClickListener actionBarLeftBtnListener = new OnClickListener() {

        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
           getActivity().finish();
        }
    };

    private static class InnerHandler extends Handler {
        private WeakReference<ThankLetterFragment> fragmentReference;

        public InnerHandler(ThankLetterFragment fragment) {
            fragmentReference = new WeakReference<ThankLetterFragment>(fragment);
        }

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            final ThankLetterFragment fragment = fragmentReference.get();
            if (fragment == null) {
                return;
            }
            switch (msg.what) {
                default:
                    break;
            }
        }
    }

    @Override
    public String getReqestTag() {
        // TODO Auto-generated method stub
        return TAG;
    }

    public void onDestroy() {
        super.onDestroy();

        // reset
        pageIndex = 1;

        HttpTaskManager.stop(TAG);
    }
}
