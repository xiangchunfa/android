/*
 * ShareDialogFragment.java
 * classes : com.qdoc.client.ui.fragment.ShareDialogFragment
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-18 上午2:31:20
 */
package com.qdoc.client.ui.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.content.LocalBroadcastManager;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;

import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.ShareDataModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.ui.LoginActivity;
import com.qdoc.client.util.IntentTools;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.ToastUtils;

/**
 * com.qdoc.client.ui.fragment.ShareDialogFragment
 * 
 * @author xiangyutian <br/>
 *         create at 2014-7-18 上午2:31:20
 */
public class ShareDialogFragment extends DialogFragment {
	/**
	 * TAG
	 */
	public static final String TAG = ShareDialogFragment.class.getSimpleName();

	/**
	 * view
	 */
	private Button btnConfirm;
	private Button btnCancel;

	/**
	 * params
	 */
	private long consultId;
	private int shareStatus;

	public static ShareDialogFragment newInstance(Bundle bundle) {
		final ShareDialogFragment fragment = new ShareDialogFragment();
		fragment.setArguments(bundle);
		return fragment;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setStyle(DialogFragment.STYLE_NO_TITLE, 0);
	}

	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.fragment_dialog_share, container,
				false);
		WindowManager.LayoutParams wmlp = getDialog().getWindow()
				.getAttributes();
		wmlp.gravity = Gravity.BOTTOM;
		return v;
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		initParams();
		initView(view);
		initListener();
	}

	private void initParams() {
		// TODO Auto-generated method stub
		if (getArguments() != null) {
			consultId = getArguments().getInt(IntentTools.EXTRA_CONSULT_ID);
			shareStatus=getArguments().getInt(IntentTools.EXTRA_SHARE_STATUS);
			LogUtils.d(TAG, "consultId=============== " + consultId);
		}
	}

	private void initView(View view) {
		// TODO Auto-generated method stub
		btnConfirm = (Button) view.findViewById(R.id.btn_share_confirm);
		btnCancel = (Button) view.findViewById(R.id.btn_share_cancel);
	}

	protected void initListener() {
		btnConfirm.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(shareStatus==AppConstants.SHARE_ADD)
					startCancelShareRequest(); 	
				else
					startShareRequest();
			}
		});
		btnCancel.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dismiss();
			}
		});
	}

	private void startShareRequest() {
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(
				DataRequestUtils.getShareRequestParam(TAG, token, consultId),
				JsonParserFactory.parseBaseModel(ShareDataModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,
							Object resultData) {
						// TODO Auto-generated method stub
						if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
							final ShareDataModel dataModel = (ShareDataModel) resultData;
							if (dataModel != null&&dataModel.getState()==ServerErrorCode.INTERFACE_SUCCESS) {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), "分享成功");
								Intent intent=new Intent(AppConstants.SHARE_STATUS_INTENT_ACTION);
								intent.putExtra(IntentTools.EXTRA_SHARE_STATUS, AppConstants.SHARE_ADD);
							    LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(
	                                   intent);
							}else if(dataModel.getState() == ServerErrorCode.TOKEN_INVALID){
		                         LoginActivity.startActivity(getActivity());
							}else {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), dataModel.getErrorMsg());
							}
						} else {
							if (resultData == null) {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), "分享失败");
							} else {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(),
										(String) resultData);
							}
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode
								+ "resultData ::: " + resultData);

						dismiss();
					}
				});
	}

	private void startCancelShareRequest() {
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(DataRequestUtils
				.getCancelShareRequestParam(TAG, token, consultId),
				JsonParserFactory.parseBaseModel(ShareDataModel.class),
				new IResultReceiver() {

					@Override
					public void onReceiveResult(int resultCode,
							Object resultData) {
						// TODO Auto-generated method stub
						if (resultCode == ServerErrorCode.STATUS_SUCCESS) {
							final ShareDataModel dataModel = (ShareDataModel) resultData;
							if (dataModel != null&&dataModel.getState()==ServerErrorCode.INTERFACE_SUCCESS) {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), "取消分享成功");
								Intent intent=new Intent(AppConstants.SHARE_STATUS_INTENT_ACTION);
								intent.putExtra(IntentTools.EXTRA_SHARE_STATUS, AppConstants.SHARE_CANCEL);
							    LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(
	                                   intent);
							}else if(dataModel.getState() == ServerErrorCode.TOKEN_INVALID){
		                         LoginActivity.startActivity(getActivity());
							}else {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), dataModel.getErrorMsg());
							}
						} else {
							if (resultData == null) {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(), "取消分享失败");
							} else {
								ToastUtils.ToastShort(getActivity()
										.getApplicationContext(),
										(String) resultData);
							}
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode
								+ "resultData ::: " + resultData);

						dismiss();
					}
				});
	}
}
