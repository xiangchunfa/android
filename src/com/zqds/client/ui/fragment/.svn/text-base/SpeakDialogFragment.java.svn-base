/*
 * ShareDialogFragment.java
 * classes : com.qdoc.client.ui.fragment.ShareDialogFragment
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-18 上午2:31:20
 */
package com.qdoc.client.ui.fragment;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicInteger;

import android.content.Intent;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.LocalBroadcastManager;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;

import com.qdoc.client.R;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.util.IntentTools;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.ToastUtils;

/**
 * com.qdoc.client.ui.fragment.ShareDialogFragment
 * 
 * @author xiangyutian <br/>
 *         create at 2014-7-18 上午2:31:20
 */
public class SpeakDialogFragment extends DialogFragment {
    /**
     * TAG
     */
    public static final String TAG = SpeakDialogFragment.class.getSimpleName();

    /**
     * view
     */
    private MediaRecorder mRecorder = null;
    private Button btn_vol_title;
    private ImageView switchToggle;

    /**
     * params
     */
    private RecordCountTimer recordCountTimer;
    private AutoCountTimer autoCountTimer;
    private static String mFileName = null;
    private AtomicInteger autoCount = new AtomicInteger();// 推荐页请求计数器
    private boolean isRecordStatus = false;
    private long consultId;
    private String consultFrom;

    public static SpeakDialogFragment newInstance(Bundle bundle) {
        final SpeakDialogFragment fragment = new SpeakDialogFragment();
        fragment.setArguments(bundle);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(DialogFragment.STYLE_NO_TITLE, 0);
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_dialog_speak, container, false);
        WindowManager.LayoutParams wmlp = getDialog().getWindow().getAttributes();
        wmlp.gravity = Gravity.BOTTOM;
        return v;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initParams();
        initView(view);
        initListener();
    }

    private void initParams() {
        // TODO Auto-generated method stub
        if (getArguments() != null) {
            consultId = getArguments().getLong(IntentTools.EXTRA_CONSULT_ID);
            consultFrom = getArguments().getString(IntentTools.EXTRA_CONSULT_FROM);
        }

        recordCountTimer = new RecordCountTimer(30000, 1000);
        autoCountTimer = new AutoCountTimer(1000, 1000);

        setAudioRecordPath();
    }

    private void initView(View view) {
        // TODO Auto-generated method stub
        btn_vol_title = (Button) view.findViewById(R.id.btn_vol_title);
        btn_vol_title.setOnTouchListener(new OnTouchListener());

        switchToggle = (ImageView) view.findViewById(R.id.switchtoggle);
        switchToggle.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                dismiss();

                // 切换文字
                Bundle bundle = new Bundle();
                bundle.putLong(IntentTools.EXTRA_CONSULT_ID, consultId);
                bundle.putString(IntentTools.EXTRA_CONSULT_FROM, consultFrom);
                FragmentManager fm = getFragmentManager();
                WriteDialogFragment writeDialog = WriteDialogFragment.newInstance(bundle);
                writeDialog.show(fm, WriteDialogFragment.TAG);
            }
        });
    }

    protected void initListener() {
    }

    // 当录音按钮被click时调用此方法，开始或停止录音
    private void onRecord(boolean start) {
        if (start) {
            startRecording();
        } else {
            stopRecording();
        }
    }

    private void startRecording() {
        mRecorder = new MediaRecorder();
        // 设置音源为Micphone
        mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        // 设置封装格式
        mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mRecorder.setOutputFile(mFileName);
        // 设置编码格式
        mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

        try {
            mRecorder.prepare();
        } catch (IOException e) {
            LogUtils.e(TAG, "prepare() failed");
        }

        mRecorder.start();
    }

    private void stopRecording() {
        if (mRecorder != null) {
            mRecorder.stop();
            mRecorder.release();
            mRecorder = null;
        }
    }

    // 构造方法
    public void setAudioRecordPath() {
        mFileName = Environment.getExternalStorageDirectory().getAbsolutePath();
        mFileName += "/audiorecord.amr";
    }

    @Override
    public void onPause() {
        super.onPause();
        // Activity暂停时释放录音和播放对象
        if (mRecorder != null) {
            mRecorder.release();
            mRecorder = null;
        }
    }

    /* 定义一个倒计时的内部类 */
    class RecordCountTimer extends CountDownTimer {
        public RecordCountTimer(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);
        }

        @Override
        public void onFinish() {
            ToastUtils.ToastShort(getActivity().getApplicationContext(), "Finish");
            onRecord(false);
            isRecordStatus = false;
            btn_vol_title.setText("按住说话");

            dismiss();
            // 生成语音
            Intent intent = new Intent(AppConstants.VOICE_CREATE_INTENT_ACTION);
            intent.putExtra(IntentTools.EXTRA_CONSULT_ID, consultId);
            intent.putExtra(IntentTools.EXTRA_CONSULT_FROM, consultFrom);
            LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(intent);
        }

        @Override
        public void onTick(long millisUntilFinished) {
            // tv.setText();
            ToastUtils.ToastShort(getActivity().getApplicationContext(), "录音30秒计时(" + millisUntilFinished / 1000
                    + ")...");
        }
    }

    /* 定义一个倒计时的内部类 */
    class AutoCountTimer extends CountDownTimer {
        public AutoCountTimer(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);
        }

        @Override
        public void onFinish() {
            ToastUtils.ToastShort(getActivity().getApplicationContext(), "Finish");
            autoCount.set(0);

            // 至少规定时间后才开始录制
            onRecord(true);
            recordCountTimer.start();
            isRecordStatus = true;
            btn_vol_title.setText("释放停止录音");
        }

        @Override
        public void onTick(long millisUntilFinished) {
            // tv.setText();
            ToastUtils
                    .ToastShort(getActivity().getApplicationContext(), "触摸倒计时(" + millisUntilFinished / 1000 + ")...");
            autoCount.incrementAndGet();
        }
    }

    class OnTouchListener implements View.OnTouchListener {

        @Override
        public boolean onTouch(View v, MotionEvent mEvent) {

            switch (v.getId()) {
                case R.id.btn_vol_title:
                    if (mEvent.getAction() == MotionEvent.ACTION_DOWN) {
                        // 触摸计时
                        autoCountTimer.start();
                        LogUtils.d(TAG, "MotionEvent.ACTION_DOWN ======================");
                    } else if (mEvent.getAction() == MotionEvent.ACTION_UP) {
                        autoCountTimer.cancel();
                        autoCount.set(0);
                        recordCountTimer.cancel();
                        isRecordStatus = false;
                        onRecord(false);

                        btn_vol_title.setText("按住说话");

                        dismiss();
                        // 生成语音
                        Intent intent = new Intent(AppConstants.VOICE_CREATE_INTENT_ACTION);
                        intent.putExtra(IntentTools.EXTRA_CONSULT_FROM, consultFrom);
                        intent.putExtra(IntentTools.EXTRA_CONSULT_ID, consultId);
                        LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(intent);
                        LogUtils.d(TAG, "MotionEvent.ACTION_UP ##########################");
                    } else {

                    }
                    return true;
                default:
                    return true;
            }
        }
    }

    public interface DialogClickListener {
        public void dialogOnClickListener();
    }

}
