package com.qdoc.client.ui.fragment;

import java.util.ArrayList;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;

import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.DoctorWithdrawDto;
import com.qdoc.client.model.ListWithdrawalWaterDataModel;
import com.qdoc.client.model.Pagination;
import com.qdoc.client.ui.LoginActivity;
import com.qdoc.client.ui.WithDrawDetailActivity;
import com.qdoc.client.ui.adapter.WithDrawListAdapter;
import com.qdoc.client.ui.widget.ErrorMaskView;
import com.qdoc.client.ui.widget.PullListMaskController;
import com.qdoc.client.ui.widget.PullListMaskController.ListViewState;
import com.qdoc.client.ui.widget.PullRefreshView;
import com.qdoc.client.ui.widget.PullRefreshView.OnClickFootViewListener;
import com.qdoc.client.ui.widget.PullRefreshView.OnRefreshListener;
import com.qdoc.client.ui.widget.TitleBar;
import com.qdoc.client.util.ListUtils;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.ToastUtils;

/**
 * create at 2014-11-5 17:07
 * @author antony
 *显示提现流水记录界面
 */
public class MyWithdrawFragment extends BaseFragment {
	
	public static final String TAG = MyWithdrawFragment.class.getSimpleName();
	
	/**
	 * view
	 */
	private TitleBar mTitleBar;
	private PullRefreshView withdraw_listview;
	private PullListMaskController mViewController;
	private int currentPage;//当前页码
	private int PAGE_SIZE = 10;
	
	/**
	 * params
	 */
	private WithDrawListAdapter withDrawListAdapter;
	private ArrayList<DoctorWithdrawDto> withDrawListData;//兑换记录数据列表
	
	/*
	 * 
	 */
	public static MyWithdrawFragment getNewInstance(Bundle bundle){
		final MyWithdrawFragment myWithdrawFragment = new MyWithdrawFragment();
		myWithdrawFragment.setArguments(bundle);
		return myWithdrawFragment;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_withdraw_list, container, false);
	}
	
	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		initView(view);
		initListener();
		initData();
	}

	/*
	 * 初始化视图控件
	 */
	private void initView(View view) {
		LogUtils.d(TAG, "---------MyWithdrawFragment onViewCreate initView------------");
		 mTitleBar = (TitleBar) view.findViewById(R.id.titlebar);
	     mTitleBar.setTitleInfo(R.string.my_withdraw_record, R.drawable.icon_back, 0, actionBarLeftBtnListener, null,
	                getResources().getColor(R.color.titlebar_bg));
	     //提现明细列表
	     withdraw_listview = (PullRefreshView) view.findViewById(R.id.withdraw_list);
	     // 自定义emptyview
	     ErrorMaskView maskView = (ErrorMaskView) view.findViewById(R.id.maskView);
	     mViewController = new PullListMaskController(withdraw_listview, maskView);
	     mViewController.showViewStatus(ListViewState.EMPTY_LOADING);
	}
	
    OnClickListener actionBarLeftBtnListener = new OnClickListener() {

        @Override
        public void onClick(View v) {
        	getActivity().finish();
        }
    };

	/*
	 * 初始化数据与绑定数据
	 */
	private void initData() {
		withDrawListData = new ArrayList<DoctorWithdrawDto>();
		withDrawListAdapter = new WithDrawListAdapter(getActivity(), withDrawListData);
		withdraw_listview.setAdapter(withDrawListAdapter);
		startHttpRequest();
		
	}

	/*
	 * 初始化事件监听器
	 */
	private void initListener() {
		mViewController.setOnRetryClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				getMyWithdrawInitRecord();
			}
		});
		
		mViewController.setOnLoadMoreListener(new OnClickFootViewListener() {
			
			@Override
			public void onClickFootView() {
				getMyWithdrawMoreRecord();
			}
		});
		
		mViewController.setOnRefreshListener(new OnRefreshListener() {
			
			@Override
			public void onRefresh() {
				getMyWithdrawRefreshRecord();
			}
		});
		
		withdraw_listview.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View item, int position,
					long arg3) {
				DoctorWithdrawDto doctorWithdrawDto = (DoctorWithdrawDto) parent.getAdapter().getItem(position);
				WithDrawDetailActivity.startActivity(getContext(), doctorWithdrawDto);
			}
		});
	}
	
	/**
	 * 获取体现流水记录
	 */
	private void getMyWithdrawInitRecord(){
		currentPage = 1;//初始页码从1开始
    	String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
        HttpTaskManager.startStringRequest(DataRequestUtils.getMyWithdrawRecordParam(TAG, token,currentPage,PAGE_SIZE), 
        		JsonParserFactory.parseBaseModel(ListWithdrawalWaterDataModel.class), new IResultReceiver() {
					
					@Override
					public void onReceiveResult(int resultCode, Object resultData) {
						if(resultCode == ServerErrorCode.STATUS_SUCCESS){
							final ListWithdrawalWaterDataModel listWithdrawalWaterDataModel = (ListWithdrawalWaterDataModel) resultData;
							if(listWithdrawalWaterDataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS){
								Pagination<DoctorWithdrawDto> pager = listWithdrawalWaterDataModel.getPager();
								ArrayList<DoctorWithdrawDto> data = pager.getElements();
								if(data!=null){
									if(ListUtils.isEmpty(data)){
										 mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无咨询记录，请点击刷新");
									}else if(pager.isHasNext()){
										//有提现记录,且还有下一页
										withDrawListData.clear();//先清空所有记录
										withDrawListData.addAll(data);//再重新添加新加载的记录
										withDrawListAdapter.changeData(withDrawListData);
										mViewController.showViewStatus(ListViewState.LIST_NORMAL_HAS_MORE);
									}else{
										//有提现记录，已经是最后一页
										withDrawListData.clear();//先清空所有记录
										withDrawListData.addAll(data);//再重新添加新加载的记录
										withDrawListAdapter.changeData(withDrawListData);
										mViewController.showViewStatus(ListViewState.LIST_NO_MORE);
									}
								}else{
									mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无咨询记录，请点击刷新");
								}
							}else if(listWithdrawalWaterDataModel.getState() == ServerErrorCode.TOKEN_INVALID){
								LoginActivity.startActivity(getActivity());
							}
						}else{
                            if (resultData == null) {
                                ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                            } else {
                                ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                            }
                            mViewController.showViewStatus(ListViewState.EMPTY_RETRY);
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
					}
				});
	}
	
	/**
	 * 下拉刷新
	 */
	private void getMyWithdrawRefreshRecord(){
		currentPage = 1;//初始页码从1开始
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
        HttpTaskManager.startStringRequest(DataRequestUtils.getMyWithdrawRecordParam(TAG, token,currentPage,PAGE_SIZE), 
        		JsonParserFactory.parseBaseModel(ListWithdrawalWaterDataModel.class), new IResultReceiver() {
					
					@Override
					public void onReceiveResult(int resultCode, Object resultData) {
						if(resultCode == ServerErrorCode.STATUS_SUCCESS){
							final ListWithdrawalWaterDataModel listWithdrawalWaterDataModel = (ListWithdrawalWaterDataModel) resultData;
							if(listWithdrawalWaterDataModel.getState() == ServerErrorCode.INTERFACE_SUCCESS){
								Pagination<DoctorWithdrawDto> pager = listWithdrawalWaterDataModel.getPager();
								ArrayList<DoctorWithdrawDto> data = pager.getElements();
								if(data!=null){
									if(ListUtils.isEmpty(data)){
										 mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无咨询记录，请点击刷新");
									}else if(pager.isHasNext()){
										//有提现记录,且还有下一页
										withDrawListData.clear();//先清空所有记录
										withDrawListData.addAll(data);//再重新添加新加载的记录
										withDrawListAdapter.changeData(withDrawListData);
										mViewController.showViewStatus(ListViewState.LIST_REFRESH_COMPLETE);
									}else{
										//有提现记录，已经是最后一页
										withDrawListData.clear();//先清空所有记录
										withDrawListData.addAll(data);//再重新添加新加载的记录
										withDrawListAdapter.changeData(withDrawListData);
										mViewController.showViewStatus(ListViewState.PULL_DOWN_LIST_NO_MORE);
									}
								}else{
									mViewController.showViewStatus(ListViewState.EMPTY_BLANK, "暂无咨询记录，请点击刷新");
								}
							}else if(listWithdrawalWaterDataModel.getState() == ServerErrorCode.TOKEN_INVALID){
								LoginActivity.startActivity(getActivity());
							}
						}else{
                            if (resultData == null) {
                                ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                            } else {
                                ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                            }
                            mViewController.showViewStatus(ListViewState.EMPTY_RETRY);
						}
						LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
					}
				});
	}
	
	/**
	 * 上拉加载更多
	 */
	private void getMyWithdrawMoreRecord(){
		currentPage = currentPage+1;//页码加1
		String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(DataRequestUtils.getMyWithdrawRecordParam(TAG, token, currentPage, PAGE_SIZE), 
				JsonParserFactory.parseBaseModel(ListWithdrawalWaterDataModel.class), new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					final ListWithdrawalWaterDataModel listWithdrawalWaterDataModel = (ListWithdrawalWaterDataModel) resultData;
					if(listWithdrawalWaterDataModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						Pagination<DoctorWithdrawDto> pager = listWithdrawalWaterDataModel.getPager();
						if(ListUtils.isEmpty(pager.getElements())){
							//没有更多数据
							mViewController.showViewStatus(ListViewState.LIST_NO_MORE);
						}else{
							//有更多数据
							withDrawListData.addAll(pager.getElements());
							withDrawListAdapter.changeData(withDrawListData);
							mViewController.showViewStatus(ListViewState.LIST_NORMAL_HAS_MORE);
						}
					}else{
						//token已过期，跳转到登陆界面要求从新登陆
						LoginActivity.startActivity(getActivity());
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
                    mViewController.showViewStatus(ListViewState.LIST_RETRY);
					currentPage = currentPage-1;//网络出错，页面回滚到之前页码
				}
				LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
			}
		});
	}
	
	public void startHttpRequest(){
		getMyWithdrawInitRecord();
	}
	
	@Override
	public void onPause() {
		super.onPause();
		LogUtils.d(TAG, TAG+"  onPause()");
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
		LogUtils.d(TAG, TAG+"  onDestroy");
		HttpTaskManager.stop(TAG);
		currentPage = 1;
	}

	@Override
	public String getReqestTag() {
		return TAG;
	}

	@Override
	public void onResume() {
		super.onResume();
		LogUtils.d(TAG, TAG+"---------MyWithdrawFragment   onResume()----------");
	}
	
	@Override
	public void onDestroyView() {
		super.onDestroyView();
		LogUtils.d(TAG, TAG+"---------MyWithdrawFragment   onDestroyView()----------");
	}
	
	
	@Override
	public void onStop() {
		super.onStop();
		LogUtils.d(TAG, TAG+"--------MyWithdrawFragment  onStop()--------------");
	}

}
