package com.qdoc.client.ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.helper.Global;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.BaseModel;
import com.qdoc.client.model.UpdatePassWordModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.ui.dialog.HintDlg;
import com.qdoc.client.ui.dialog.HintDlg.OnDialogclickListener;
import com.qdoc.client.ui.widget.TitleBar;
import com.qdoc.client.util.EncodeUtils;
import com.qdoc.client.util.StringUtils;
import com.qdoc.client.util.ToastUtils;

import android.app.Dialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

public class ChangePassWordActivity extends BaseActivity {
	
	private static final String TAG = ChangePassWordActivity.class.getSimpleName();
	
	private TitleBar mTitleBar;
	private EditText et_old_password,et_new_password,et_confirm_new_password;
	private ImageView iv_old_password_tip,iv_new_password_tip,iv_confirm_new_password_tip;
	private TextView confirm_change_password;
	private String oldPassWord,newPassWord,confirmNewPassWord;
	//记录旧密码的错误次数
	private int wrongOldPassWordTime = 1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_change_password);
		
		initView();
		initListener();
	}

	@Override
	protected void initView() {
		mTitleBar = (TitleBar)findViewById(R.id.titlebar);
		mTitleBar.setTitleInfo(R.string.change_password, R.drawable.icon_back, 0, actionBarLeftBtnListener, null, getResources().getColor(R.color.titlebar_bg));
		et_old_password = (EditText) findViewById(R.id.et_old_password);
		et_new_password = (EditText) findViewById(R.id.et_new_password);
		et_confirm_new_password = (EditText) findViewById(R.id.et_confirm_new_password);
		iv_old_password_tip = (ImageView) findViewById(R.id.iv_old_password_tip);
		iv_new_password_tip = (ImageView) findViewById(R.id.iv_new_password_tip);
		iv_confirm_new_password_tip = (ImageView) findViewById(R.id.iv_confirm_new_password_tip);
		confirm_change_password = (TextView) findViewById(R.id.confirm_change_password);
	}

	@Override
	protected void initListener() {
		confirm_change_password.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				String currentOldPassWord = et_old_password.getText().toString().trim();
				if(StringUtils.isEmpty(currentOldPassWord)){
					ToastUtils.ToastShort(ChangePassWordActivity.this, "请填写旧密码");
					return;
				}
				String currentNewPassWord = et_new_password.getText().toString().trim();
				if(StringUtils.isEmpty(currentNewPassWord)){
					ToastUtils.ToastShort(ChangePassWordActivity.this, "请填写新密码");
					return;
				}
				String currentConfirmNewPassWord = et_confirm_new_password.getText().toString().trim();
				if(StringUtils.isEmpty(currentConfirmNewPassWord)){
					ToastUtils.ToastShort(ChangePassWordActivity.this, "请再次填写新密码");
					return;
				}
				Pattern pattern = Pattern.compile("[0-9a-zA-Z_。，]{6,}");
				Matcher matcher = pattern.matcher(currentNewPassWord);
				if(!matcher.matches()){
					ToastUtils.ToastShort(ChangePassWordActivity.this, "密码需要大于6位且不包含特殊字符");
					iv_new_password_tip.setVisibility(View.VISIBLE);
					return;
				}
				iv_new_password_tip.setVisibility(View.GONE);
				if(!currentNewPassWord.equals(currentConfirmNewPassWord)){
					ToastUtils.ToastShort(ChangePassWordActivity.this, "两次输入的密码不一致");
					iv_confirm_new_password_tip.setVisibility(View.VISIBLE);
					return;
				}
				iv_confirm_new_password_tip.setVisibility(View.GONE);
				changePassWord(EncodeUtils.encodeMD5(currentOldPassWord), EncodeUtils.encodeMD5(currentNewPassWord));
			}
		});
	}
	
	OnClickListener actionBarLeftBtnListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			finish();
		}
	};

	
	private void changePassWord(String oldPassWord,String newPassWord){
    	String token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
    	Global.progressDialog = ProgressDialog.show(ChangePassWordActivity.this, null, null, true, true);
    	HttpTaskManager.startStringRequest(DataRequestUtils.changePassWord(TAG, token, oldPassWord, newPassWord), 
    			JsonParserFactory.parseBaseModel(UpdatePassWordModel.class), 
    			new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				Global.progressDialog.dismiss();
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					UpdatePassWordModel updatePassWordModel = (UpdatePassWordModel) resultData;
					if(updatePassWordModel!=null&&updatePassWordModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						//修改密码成功
						ToastUtils.ToastShort(ChangePassWordActivity.this, "修改密码成功");
						//关闭界面
						finish();
					}else if(updatePassWordModel!=null&&updatePassWordModel.getState()==ServerErrorCode.INTERFACE_FAIL&&updatePassWordModel.getStatus()==AppConstants.WRONG_OLD_PASSWORD){
						//旧密码错误
						ToastUtils.ToastShort(ChangePassWordActivity.this, "原密码验证错误，请重新输入");
						//显示旧密码错误图标
						iv_old_password_tip.setVisibility(View.VISIBLE);
						if(wrongOldPassWordTime<2){
							wrongOldPassWordTime = wrongOldPassWordTime+1;
						}else{
							//弹出对话框
							String title = getString(R.string.dialog_hint_title);
							String message = getString(R.string.forget_password_dialog_content);
			        		String ok_text = getContext().getString(R.string.look_for_immediately);
			        		String cancle_text = getContext().getString(R.string.try_again);
			        		new HintDlg(ChangePassWordActivity.this, message, title, cancle_text, ok_text, new OnDialogclickListener() {
								
								@Override
								public void onButtonClick(int type,Dialog dialog) {
									switch (type) {
									case AppConstants.LEFT_BUTTON:
										//再试试
										dialog.dismiss();
										break;
									case AppConstants.RIGHT_BUTTON:
										//立即找回密码
										ForgetPwdActivity.startActivity(ChangePassWordActivity.this);
										finish();
										dialog.dismiss();
										break;
									}
								}
							},R.layout.print_card_dialog).show();
							//还原错误次数
							wrongOldPassWordTime = wrongOldPassWordTime-1;
						}
					}else if(updatePassWordModel!=null && updatePassWordModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ChangePassWordActivity.this);
					}else{
						ToastUtils.ToastShort(ChangePassWordActivity.this, updatePassWordModel.getErrorMsg());
					}
				}else{
					ToastUtils.ToastShort(getContext().getApplicationContext(),R.string.network_error);
				}
			}
		});
	}
}
