package com.qdoc.client.ui;

import java.util.ArrayList;
import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnKeyListener;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebSettings;
import android.webkit.WebSettings.LayoutAlgorithm;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import com.qdoc.client.R;
import com.qdoc.client.config.PersonalConfig;
import com.qdoc.client.config.PersonalConfigKey;
import com.qdoc.client.helper.Global;
import com.qdoc.client.helper.ShareService;
import com.qdoc.client.http.HttpTaskManager;
import com.qdoc.client.http.ServerErrorCode;
import com.qdoc.client.http.listener.IResultReceiver;
import com.qdoc.client.http.parser.JsonParserFactory;
import com.qdoc.client.http.url.DataRequestUtils;
import com.qdoc.client.model.BaseModel;
import com.qdoc.client.model.ListReviewsModel;
import com.qdoc.client.model.Pagination;
import com.qdoc.client.model.RepArticleDto;
import com.qdoc.client.model.RepArticleModel;
import com.qdoc.client.model.RepReviewDto;
import com.qdoc.client.model.RepReviewReplyDto;
import com.qdoc.client.model.RepReviewReturnDtoModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.system.ItemOnclickListener;
import com.qdoc.client.ui.view.ArticlePullToRefreshView;
import com.qdoc.client.ui.view.ArticlePullToRefreshView.OnFooterRefreshListener;
import com.qdoc.client.ui.view.OneLevelComentView;
import com.qdoc.client.ui.view.TwoLevelCommentView;
import com.qdoc.client.ui.view.TwoLevelCommentView.ReplyItemOnClickListener;
import com.qdoc.client.ui.widget.TitleBar;
import com.qdoc.client.util.DisplayUtils;
import com.qdoc.client.util.IntentTools;
import com.qdoc.client.util.ListUtils;
import com.qdoc.client.util.LogUtils;
import com.qdoc.client.util.OnKeyDownUtil;
import com.qdoc.client.util.ToastUtils;

/**
 * 文章内容页
 * @author Antony
 * create at 2015-04-15 11:07
 *
 */
public class ArticleDetailActivity extends BaseActivity implements OnClickListener,OnFooterRefreshListener{
	
	private static final String TAG = ArticleDetailActivity.class.getSimpleName();
	
	private String token;
	private long articleId;//文章ID
	private int column_name;//栏目文案资源
	private int review_page;//页码
	private int review_limit = 5;//每页数据
	//标题栏部分
	private TitleBar mTitleBar;
	private ImageView titlebar_righticon1;//标题栏右边按钮
	//上拉加载更多评论
	private ArticlePullToRefreshView aptrv_article_detail;
	//整个内容页的滑动控件
	private ScrollView sv_article_detail;
	//文章内容布局
	private LinearLayout ll_article_content;
	//相关资讯布局
	private LinearLayout ll_interrelated_info;
	//文章评论布局
	private LinearLayout ll_review_list;
	//文章标题
	private TextView tv_article_title;
	//文章来源信息布局
	private LinearLayout ll_public_info_layout;
	//文章来源
	private TextView tv_art_source;
	//发布时间
	private TextView tv_public_time;
	//阅读量
	private TextView tv_article_detail_read_count;
	//文章内容
	private WebView wv_article_content;
	//文章点赞布局
	private RelativeLayout rl_praise_article;
	//点赞手图标
	private ImageView iv_praise_article;
	//点赞数文本框
	private TextView tv_praise_count;
	//点赞加1动画文本框
	private TextView tv_praise_and_1;//点赞加1
	//记录给文章是否被收藏的变量
	private boolean hasCollect = false;//是否已收藏该文章
	
	//评论列表布局
	private LinearLayout ll_oneLevel_commentlist;
	
	
	//加载评论列表时的进度条布局
	private RelativeLayout rl_loading_parent;
	//加载评论的进度条
	private ProgressBar pb_loading_review;
	//加载评论状态的文本框
	private TextView tv_loading_text;
	//显示相关资讯的TextView
	private TextView tv_interrelated_info_1,tv_interrelated_info_2,tv_interrelated_info_3;
	
	/*
	 * (non-Javadoc)
	 * 
	 */
	private ArrayList<RepReviewDto> repReviewList;//评论列表
	//private ReviewListAdapter reviewListAdapter;//评论列表适配器
	private ItemOnclickListener mItemOnClickListener;
	private ReplyItemOnClickListener mReplyItemOnClickListener;
	
	/*
	 * (non-Javadoc)
	 * 底部按钮部分
	 */
	private LinearLayout ll_article_detail_footer;
	private Button bt_review;//写评论按钮
	private TextView tv_amount_review;//评论条数文本控件
	private int reviewCount;
	private float preScrollY;//记录上一次Y轴
	private long lastCollectTime;//记录上一次收藏文章的时间(避免频繁操作)
	private ImageButton ib_amount_review,ib_share_article,ib_collect_article;//定位评论按钮，分享按钮，收藏按钮
	
	/*
	 * (non-Javadoc)
	 * 发送评论部分
	 */
	private RelativeLayout ll_send_review;
	private EditText et_review_text;
	private Button bt_send_review;
	
	//输入法管理器
	private InputMethodManager imm;
	
	//收藏文章操作PopupWindow
	private PopupWindow popupWindow;
	//文章详情对象
	private RepArticleDto repArticleDto;
	//回复类型
	private int praType;
	//评论回复的ID
	private long replyReviewId = 0;
	//当前需要评论的ID（可能是文章ID，也可能是评论ID）
	private long replyId;
	//当前被回复的一级评论
	private RepReviewDto currentRepReviewDto;
	//当前被回复的二级评论
	private RepReviewReplyDto clickRepReviewReply;
	//二级评论的父布局
	private LinearLayout ll_twoLevel_comment;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_article_detail);
		
		initView();
		initListener();
		initData();
	}

	@Override
	protected void initView() {
		column_name = getIntent().getExtras().getInt(IntentTools.EXTRA_COLUMN_NAME);
		mTitleBar = (TitleBar) findViewById(R.id.titlebar);
		mTitleBar.setTitleInfoWithRightIcon(column_name, 
											R.drawable.icon_back, 
											R.drawable.enlarge_font_selector, 
											0, 
											actionBarLeftBtnListener, 
											rightIconCliclkListener,
											null, 
											getResources().getColor(R.color.titlebar_bg));
		titlebar_righticon1 = (ImageView) findViewById(R.id.titlebar_righticon1);
		tv_article_title = (TextView) findViewById(R.id.tv_article_title);
		ll_public_info_layout = (LinearLayout) findViewById(R.id.ll_public_info_layout);
		tv_art_source = (TextView) findViewById(R.id.tv_art_source);
		tv_public_time = (TextView) findViewById(R.id.tv_public_time);
		tv_article_detail_read_count = (TextView) findViewById(R.id.tv_article_detail_read_count);
		wv_article_content = (WebView) findViewById(R.id.wv_article_content);
		rl_praise_article = (RelativeLayout) findViewById(R.id.rl_praise_article);
		iv_praise_article = (ImageView) findViewById(R.id.iv_praise_article);
		tv_praise_count = (TextView) findViewById(R.id.tv_praise_count);
		tv_praise_and_1 = (TextView) findViewById(R.id.tv_praise_and_1);
		aptrv_article_detail = (ArticlePullToRefreshView) findViewById(R.id.aptrv_article_detail);
		sv_article_detail = (ScrollView) findViewById(R.id.sv_article_detail);
		ll_article_content = (LinearLayout) findViewById(R.id.ll_article_content);
		ll_interrelated_info = (LinearLayout) findViewById(R.id.ll_interrelated_info);
		tv_interrelated_info_1 = (TextView) findViewById(R.id.tv_interrelated_info_1);
		tv_interrelated_info_2 = (TextView) findViewById(R.id.tv_interrelated_info_2);
		tv_interrelated_info_3 = (TextView) findViewById(R.id.tv_interrelated_info_3);
		setWebView();
		//评论列表部分
		ll_review_list = (LinearLayout) findViewById(R.id.ll_review_list);
		ll_oneLevel_commentlist = (LinearLayout) findViewById(R.id.ll_article_review_list);
		rl_loading_parent = (RelativeLayout) findViewById(R.id.rl_loading_parent);
		pb_loading_review = (ProgressBar) findViewById(R.id.pb_loading_review);
		tv_loading_text = (TextView) findViewById(R.id.tv_loading_text);
	    //底部按钮部分
	    ll_article_detail_footer = (LinearLayout) findViewById(R.id.ll_article_detail_footer);
	    bt_review = (Button) findViewById(R.id.bt_review);
	    ib_amount_review = (ImageButton) findViewById(R.id.ib_amount_review);
	    ib_share_article = (ImageButton) findViewById(R.id.ib_share_article);
	    ib_collect_article = (ImageButton) findViewById(R.id.ib_collect_article);
	    tv_amount_review = (TextView) findViewById(R.id.tv_amount_review);
	    //发送评论部分
	    ll_send_review = (RelativeLayout) findViewById(R.id.ll_send_review);
	    et_review_text = (EditText) findViewById(R.id.et_review_text);
	    bt_send_review = (Button) findViewById(R.id.bt_send_review);
	}
	
	private void setWebView() {
		this.wv_article_content.getSettings().setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN);//用SINGLE_COLUMN类型可以设置页面居中显示，页面可以放大缩小
	    this.wv_article_content.getSettings().setJavaScriptEnabled(true);//WebView控件支持JavaScript
	    this.wv_article_content.getSettings().setSupportZoom(true);////可以缩放
	    this.wv_article_content.getSettings().setBuiltInZoomControls(false);//隐藏缩放按钮的控件
	    this.wv_article_content.getSettings().setDefaultTextEncodingName("utf-8");
	    this.wv_article_content.getSettings().setSupportMultipleWindows(true);//支持多窗口
	    this.wv_article_content.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);//可以通过JS打开新窗口
	    this.wv_article_content.getSettings().setDefaultFontSize(17);
	    this.wv_article_content.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//设置WebView的缓存
	}

	@Override
	protected void initListener() {
		
		bt_review.setOnClickListener(this);
		bt_send_review.setOnClickListener(this);
		ib_amount_review.setOnClickListener(this);
		ib_collect_article.setOnClickListener(this);
		ib_share_article.setOnClickListener(this);
		rl_praise_article.setOnClickListener(this);
		tv_interrelated_info_1.setOnClickListener(this);
		tv_interrelated_info_2.setOnClickListener(this);
		tv_interrelated_info_3.setOnClickListener(this);
		tv_loading_text.setOnClickListener(this);
		aptrv_article_detail.setOnFooterRefreshListener(this);
		ll_review_list.setOnClickListener(this);
		ll_interrelated_info.setOnClickListener(this);
		tv_article_title.setOnClickListener(this);
		ll_public_info_layout.setOnClickListener(this);
		
		aptrv_article_detail.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				hideEditor(et_review_text);
				return false;
			}
		});
		
		et_review_text.setOnFocusChangeListener(new OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
					imm.showSoftInput(v, 0);
				} else {
					imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
					hideEditor(v);
				}
			}
		});
		et_review_text.setOnKeyListener(new OnKeyListener() {
			
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (keyCode == KeyEvent.KEYCODE_BACK) {
					hideEditor(v);
					return true;
				}
				return false;
			}
		});
		
		mItemOnClickListener = new ItemOnclickListener() {
			
			@Override
			public void onButtonClick(int type, Object obj, View view1, View view2,int position) {}
			
			@Override
			public void onButtonClick(int type, Object obj, View view1, View view2) {}
			
			@Override
			public void onButtonClick(Object obj, View view1, View view2, int position) {
				RepReviewDto repReviewDto = (RepReviewDto) obj;
				CheckBox cb_praise_review = (CheckBox) view1;
				final TextView tv_item_praise_and_1 = (TextView) view2;
				cb_praise_review.setText(String.valueOf(Integer.parseInt(cb_praise_review.getText().toString())+1));
				//+1动画
				Animation animation = AnimationUtils.loadAnimation(ArticleDetailActivity.this,R.anim.nn);
				tv_item_praise_and_1.setVisibility(View.VISIBLE);
				tv_item_praise_and_1.startAnimation(animation);
				new Handler().postDelayed(new Runnable(){
		            public void run() {
		            	tv_item_praise_and_1.setVisibility(View.GONE);
		            } 
				}, 1000);
				//点赞评论
				handlePraise(repReviewDto.getId(), AppConstants.PRAMODEL_PRAISE, AppConstants.PRATYPE_REVIEW);
				if(cb_praise_review.isChecked()){
					cb_praise_review.setEnabled(false);
				}
			}

			@Override
			public void onReplyClick(int type, Object obj,View view) {
				RepReviewDto repReviewDto = (RepReviewDto) obj;
				currentRepReviewDto = repReviewDto;
				ll_twoLevel_comment = (LinearLayout) view;
				//回复类型为评论回复
				praType = AppConstants.REVIEW_REPLY;
				//隐藏底部菜单栏，显示发送评论布局
				ll_article_detail_footer.setVisibility(View.GONE);
				ll_send_review.setVisibility(View.VISIBLE);
				et_review_text.requestFocus();
				et_review_text.requestFocusFromTouch();
				clickRepReviewReply = null;
				if(type==AppConstants.REVIEW_ONE){
					//一级评论，回复评论回复编号为0
					replyReviewId = 0;
					replyId = repReviewDto.getId();
					et_review_text.setHint(getString(R.string.reply)+repReviewDto.getRevUserName()+":");
				}
			}
		};
		
		et_review_text.addTextChangedListener(new TextWatcher() {
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {}
			
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,int after) {}
			
			@Override
			public void afterTextChanged(Editable s) {
				if(TextUtils.isEmpty(et_review_text.getText().toString().trim()))
					bt_send_review.setEnabled(false);
				else
					bt_send_review.setEnabled(true);
			}
		});
		
		mReplyItemOnClickListener = new ReplyItemOnClickListener() {

			@Override
			public void onButtonClick(RepReviewDto repReviewDto,RepReviewReplyDto repReviewReplyDto, View view) {
				currentRepReviewDto = repReviewDto;
				clickRepReviewReply = repReviewReplyDto;
				ll_twoLevel_comment = (LinearLayout) view;
				//回复类型为评论回复
				praType = AppConstants.REVIEW_REPLY;
				ll_article_detail_footer.setVisibility(View.GONE);
				ll_send_review.setVisibility(View.VISIBLE);
				et_review_text.requestFocus();
				et_review_text.requestFocusFromTouch();
				
				//二级评论，回复评论回复编号不为0
				replyReviewId = clickRepReviewReply.getId();
				replyId = repReviewDto.getId();
				et_review_text.setHint(getString(R.string.reply)+clickRepReviewReply.getRevUserName()+":");
			}
		};
	}
	
	private void initData(){
		articleId = getIntent().getExtras().getLong(IntentTools.EXTRA_ARTICLE_ID);
		imm = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);
		review_page = 1;
		repReviewList = new ArrayList<RepReviewDto>();
		getArticleContent();
	}
	
	OnClickListener actionBarLeftBtnListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			finish();
		}
	};
	
	OnClickListener rightIconCliclkListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			hideEditor(et_review_text);
			//设置字体
			if(titlebar_righticon1.isSelected()){
				tv_article_title.setTextSize(getResources().getDimension(DisplayUtils.getDensityDpi(ArticleDetailActivity.this)<320?R.dimen.text_size_small:R.dimen.text_size_xmicro));
				wv_article_content.getSettings().setDefaultFontSize(17);
				titlebar_righticon1.setSelected(false);
			}else{
				tv_article_title.setTextSize(getResources().getDimension(DisplayUtils.getDensityDpi(ArticleDetailActivity.this)<320?R.dimen.text_size_medium:R.dimen.text_size_small));
				wv_article_content.getSettings().setDefaultFontSize(20);
				titlebar_righticon1.setSelected(true);
			}
		}
	};
	
	private void getArticleContent(){
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		Global.progressDialog = ProgressDialog.show(this, null, null, true, true);
		HttpTaskManager.startStringRequest(DataRequestUtils.getArticleDetailShow(TAG, token, articleId), 
				JsonParserFactory.parseBaseModel(RepArticleModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				Global.progressDialog.dismiss();
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					sv_article_detail.scrollTo(0, 0);//定位到页面的顶部
					RepArticleModel repArticleModel = (RepArticleModel) resultData;
					if(repArticleModel!=null && repArticleModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						RepArticleDto repArticle = repArticleModel.getArticle();
						repArticleDto = repArticle;
						if(repArticle==null)
							return;
						tv_article_title.setText(repArticle.getArtTitle());
						tv_art_source.setText(TextUtils.isEmpty(repArticle.getArtSource())?getString(R.string.article_resoure_platform):repArticle.getArtSource()+" . ");
						tv_public_time.setText(TextUtils.isEmpty(repArticle.getArtPublishTime())?"":repArticle.getArtPublishTime());
						tv_article_detail_read_count.setText(String.valueOf(repArticle.getReadCount()));
						wv_article_content.loadDataWithBaseURL(null, repArticle.getArtContent(), "text/html", "utf-8", null);
						tv_praise_count.setText(String.valueOf(repArticle.getPraiseCount()));
						hasCollect = repArticle.isFavorites();
						ib_collect_article.setSelected(hasCollect);
						reviewCount = (int) repArticle.getReviewCount();
						handleReviewCountText(reviewCount);
						showInterrelatedInfoList(repArticle.getArticles());
						getArtReviewListInitRequest();//获取评论列表
					}else if(repArticleModel!=null && repArticleModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ArticleDetailActivity.this);
					}else{
						ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
				}
				LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
			}
		});
	}
	
	private void getArtReviewListInitRequest(){
		ll_oneLevel_commentlist.removeAllViews();
		review_page = 1;
		ll_review_list.setVisibility(View.VISIBLE);
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(DataRequestUtils.getArticleReviewList(TAG, token, articleId, review_page, review_limit), 
				JsonParserFactory.parseBaseModel(ListReviewsModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					ListReviewsModel listReviewModel = (ListReviewsModel) resultData;
					if(listReviewModel!=null && listReviewModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						Pagination<RepReviewDto> pager = listReviewModel.getPager();
						ArrayList<RepReviewDto> repReviewDtoList = pager.getElements();
						if(ListUtils.isEmpty(repReviewDtoList)){
							rl_loading_parent.setVisibility(View.VISIBLE);
							ll_oneLevel_commentlist.setVisibility(View.GONE);
							tv_loading_text.setVisibility(View.VISIBLE);
							pb_loading_review.setVisibility(View.GONE);
							aptrv_article_detail.lock();
						}else if(pager.isHasNext()){
							ll_oneLevel_commentlist.setVisibility(View.VISIBLE);
							tv_loading_text.setVisibility(View.GONE);
							pb_loading_review.setVisibility(View.VISIBLE);
							rl_loading_parent.setVisibility(View.GONE);
							repReviewList.clear();//先清空所有记录
							repReviewList.addAll(repReviewDtoList);//再重新添加新加载的记录
							int oneLevelCount = repReviewDtoList.size();
							for(int i=0;i<oneLevelCount;i++){
								OneLevelComentView oneLevelCommentView = new OneLevelComentView(ArticleDetailActivity.this, repReviewDtoList.get(i),mItemOnClickListener,mReplyItemOnClickListener);
								ll_oneLevel_commentlist.addView(oneLevelCommentView);
							}
							aptrv_article_detail.unlock();
						}else{
							ll_oneLevel_commentlist.setVisibility(View.VISIBLE);
							tv_loading_text.setVisibility(View.GONE);
							pb_loading_review.setVisibility(View.VISIBLE);
							rl_loading_parent.setVisibility(View.GONE);
							repReviewList.clear();//先清空所有记录
							repReviewList.addAll(repReviewDtoList);//再重新添加新加载的记录
							int oneLevelCommentCount = repReviewDtoList.size();
							for(int i=0;i<oneLevelCommentCount;i++){
								OneLevelComentView oneLevelCommentView = new OneLevelComentView(ArticleDetailActivity.this, repReviewDtoList.get(i),mItemOnClickListener,mReplyItemOnClickListener);
								ll_oneLevel_commentlist.addView(oneLevelCommentView);
							}
							aptrv_article_detail.lock();
						}
					}else if(listReviewModel!=null && listReviewModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ArticleDetailActivity.this);
					}else{
						ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
                    ll_review_list.setVisibility(View.GONE);
				}
				LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
			}
		});
	}
	
	private void getReviewListMoreRequest(){
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		review_page = review_page + 1;
		HttpTaskManager.startStringRequest(DataRequestUtils.getArticleReviewList(TAG, token, articleId, review_page, review_limit), 
				JsonParserFactory.parseBaseModel(ListReviewsModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				aptrv_article_detail.onFooterRefreshComplete();
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					ListReviewsModel listReviewModel = (ListReviewsModel) resultData;
					if(listReviewModel!=null && listReviewModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						Pagination<RepReviewDto> pager = listReviewModel.getPager();
						ArrayList<RepReviewDto> reviewList = pager.getElements();
						if(!ListUtils.isEmpty(reviewList)){
							repReviewList.addAll(reviewList);
							int oneLevelCommentCount = reviewList.size();
							for(int i=0;i<oneLevelCommentCount;i++){
								OneLevelComentView oneLevelComentView = new OneLevelComentView(ArticleDetailActivity.this, reviewList.get(i),mItemOnClickListener,mReplyItemOnClickListener);
								ll_oneLevel_commentlist.addView(oneLevelComentView);
							}
							if(!pager.isHasNext())
								aptrv_article_detail.lock();
						}else{
							//没有更多数据
							aptrv_article_detail.lock();
						}
					}else if(listReviewModel!=null && listReviewModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ArticleDetailActivity.this);
					}else{
						ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
						review_page = review_page-1;//网络出错，页面回滚到之前页码
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
					review_page = review_page-1;//网络出错，页面回滚到之前页码
				}
				LogUtils.d(TAG, "resultCode::: " + resultCode + "resultData ::: " + resultData);
			}
		});
	}
	
	private void sendReviewNew(long id,final int praType,long replyId){
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		String review_content = et_review_text.getText().toString().trim();
		HttpTaskManager.startStringRequest(DataRequestUtils.sendReviewNew(TAG, token, id, review_content, praType, replyId), 
				JsonParserFactory.parseBaseModel(RepReviewReturnDtoModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					RepReviewReturnDtoModel repReviewReturnDtoModel = (RepReviewReturnDtoModel) resultData;
					if(repReviewReturnDtoModel!=null&&repReviewReturnDtoModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						ToastUtils.ToastShort(ArticleDetailActivity.this, R.string.send_review_success);
						et_review_text.setText("");
						hideEditor(et_review_text);
						if(praType==AppConstants.ARTICLE_REPLY){
							//评论类型（文章评论）
							//刷新评论列表
							getArtReviewListInitRequest();
							//定位到评论列表布局
							scrollToPointHeight();
						}else if(praType==AppConstants.REVIEW_REPLY){
							//回复评论
							RepReviewReplyDto repReviewReplyDto = new RepReviewReplyDto();
							repReviewReplyDto.setRevContent(repReviewReturnDtoModel.getRepReviewReturnDto()==null?"":repReviewReturnDtoModel.getRepReviewReturnDto().getRevContent());
							repReviewReplyDto.setRevUserName(repReviewReturnDtoModel.getRepReviewReturnDto()==null?"":repReviewReturnDtoModel.getRepReviewReturnDto().getRevUserName());
							repReviewReplyDto.setRevTime(repReviewReturnDtoModel.getRepReviewReturnDto()==null?"":repReviewReturnDtoModel.getRepReviewReturnDto().getRevTime());
							repReviewReplyDto.setRevUserHeadImg(repReviewReturnDtoModel.getRepReviewReturnDto()==null?"":repReviewReturnDtoModel.getRepReviewReturnDto().getRevUserHeadImg());
							repReviewReplyDto.setId(repReviewReturnDtoModel.getRepReviewReturnDto()==null?0:repReviewReturnDtoModel.getRepReviewReturnDto().getId());
							repReviewReplyDto.setReplyerDto(clickRepReviewReply);
							if(replyReviewId==0){
								//二级评论
								TwoLevelCommentView twoLevelCommentView = new TwoLevelCommentView(ArticleDetailActivity.this, ll_twoLevel_comment, currentRepReviewDto, repReviewReplyDto, mReplyItemOnClickListener);
								ll_twoLevel_comment.addView(twoLevelCommentView);
							}else{
								//回复二级评论
								TwoLevelCommentView twoLevelCommentView = new TwoLevelCommentView(ArticleDetailActivity.this, ll_twoLevel_comment, currentRepReviewDto, repReviewReplyDto, mReplyItemOnClickListener);
								ll_twoLevel_comment.addView(twoLevelCommentView);
							}
						}
						//更新底部的评论数
						handleReviewCountText(reviewCount+1);
					}else if(repReviewReturnDtoModel!=null&&repReviewReturnDtoModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ArticleDetailActivity.this);
					}else{
						ToastUtils.ToastShort(ArticleDetailActivity.this, R.string.send_review_fail);
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
				}
			}
		});
	}
	
	/**
	 * 操作相关资讯，如果相关资讯列表为空，则隐藏相关资讯布局
	 * @param interrelatedInfoList
	 */
	private void showInterrelatedInfoList(ArrayList<RepArticleDto> interrelatedInfoList){
		if(ListUtils.isEmpty(interrelatedInfoList)){
			//没有相关资讯
			ll_interrelated_info.setVisibility(View.GONE);
		}else{
			ll_interrelated_info.setVisibility(View.VISIBLE);
			int size = interrelatedInfoList.size();
			for(int i=0;i<size;i++){
				if(i==0)
					tv_interrelated_info_1.setText(interrelatedInfoList.get(i).getArtTitle());
				if(i==1)
					tv_interrelated_info_2.setText(interrelatedInfoList.get(i).getArtTitle());
				if(i==2)
					tv_interrelated_info_3.setText(interrelatedInfoList.get(i).getArtTitle());
			}
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	}
	
	public static void startActivity(Context context,long articleId,int column){
		if(context==null)
			return;
		context.startActivity(IntentTools.startArticleActivity(context, articleId,column));
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_review:
			//隐藏底部按钮布局，显示编辑评论布局
			ll_article_detail_footer.setVisibility(View.GONE);
			ll_send_review.setVisibility(View.VISIBLE);
			et_review_text.requestFocus();
			et_review_text.requestFocusFromTouch();
			et_review_text.setHint(R.string.review_et_hint);
			//回复类型为位置回复
			praType = AppConstants.ARTICLE_REPLY;
			replyReviewId = 0;
			replyId = articleId;
			break;
		case R.id.bt_send_review:
			if(OnKeyDownUtil.isValidClick()){
				sendReviewNew(replyId,praType, replyReviewId);
			}
			break;
		case R.id.ib_collect_article:
			handleCollectEvent(hasCollect);
			break;
		case R.id.ib_amount_review:
			scrollToPointHeight();
			break;
		case R.id.ib_share_article:
			ShareService share = new ShareService(this);
			String shareContent = repArticleDto.getArtDigest();
			String imageURL = repArticleDto.getArtHeadImgUrl();
			String shareArticleBaseUrl = com.qdoc.client.helper.Global.debug?AppConstants.TEST_SHARE_ARTICLE_BASEURL:AppConstants.FORMAL_SHARE_ARTICLE_BASEURL;
			share.configUMShare(this,shareContent, repArticleDto.getArtTitle(),imageURL,shareArticleBaseUrl+getString(R.string.share_article_url)+articleId);
			share.openShareBoard();
			break;
		case R.id.rl_praise_article:
			//文章点赞
			if(iv_praise_article.isSelected()){
				//已经顶过，不再顶
				ToastUtils.ToastShort(this, R.string.had_praise);
				return;
			}
			iv_praise_article.setSelected(true);
			tv_praise_count.setTextColor(getResources().getColor(R.color.praise_text_color));
			//+1动画
			Animation animation = AnimationUtils.loadAnimation(this,R.anim.nn);
			tv_praise_count.setText(String.valueOf(Integer.valueOf(tv_praise_count.getText().toString())+1));
			tv_praise_and_1.setVisibility(View.VISIBLE);
			tv_praise_and_1.startAnimation(animation);
			new Handler().postDelayed(new Runnable(){
	            public void run() {
	            	tv_praise_and_1.setVisibility(View.GONE);
	            } 
			}, 1000);
			//点赞文章
			handlePraise(articleId, AppConstants.PRAMODEL_PRAISE, AppConstants.PRATYPE_ARTICLE);
			break;
		case R.id.tv_interrelated_info_1:
			startNewArticleDetail(0);
			break;
		case R.id.tv_interrelated_info_2:
			startNewArticleDetail(1);
			break;
		case R.id.tv_interrelated_info_3:
			startNewArticleDetail(2);
			break;
		case R.id.tv_loading_text:
			//getArtReviewListInitRequest();
			break;
		case R.id.tv_article_title:
		case R.id.ll_public_info_layout:
		case R.id.ll_review_list:
		case R.id.ll_interrelated_info:
			hideEditor(et_review_text);
			break;
		}
	}
	
	/**
	 * 点赞/踩，只对登录超时进行操作，其他不需要提示
	 * @param id
	 * @param praModel
	 * @param praType
	 */
	private void handlePraise(long id,int praModel,int praType){
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(DataRequestUtils.savePraise(TAG, token, id, praModel, praType), 
				JsonParserFactory.parseBaseModel(BaseModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					BaseModel baseModel = (BaseModel) resultData;
					if(baseModel!=null && baseModel.getState()==ServerErrorCode.TOKEN_INVALID)
						LoginActivity.startActivity(ArticleDetailActivity.this);
				}
			}
		});
	}
	
	/**
	 * 打开相关资讯详情页
	 */
	private void startNewArticleDetail(int buttonNo){
		hideEditor(et_review_text);
		if(ListUtils.isEmpty(repArticleDto.getArticles()))
			return;
		if(buttonNo>repArticleDto.getArticles().size())
			return;
		articleId = repArticleDto.getArticles().get(buttonNo).getId();
		hasCollect = false;
		getArticleContent();
		review_page = 1;
		if(repReviewList==null)
			repReviewList = new ArrayList<RepReviewDto>();
		else
			repReviewList.removeAll(repReviewList);
		//reviewListAdapter = new ReviewListAdapter(this, repReviewList,mItemOnClickListener,mReplyItemOnClickListener);
		//prf_review_list.setAdapter(reviewListAdapter);
		//setListViewHeight(prf_review_list);
		//getArtReviewListInitRequest();
		//mlv_article_review_list.setAdapter(reviewListAdapter);
		//getArtReviewListInitRequest();
	}
	
	private void handleCollectEvent(final boolean hasCollect){
		if((System.currentTimeMillis()-lastCollectTime)<1500){
			//大于1.5S方可操作
			return;
		}
		lastCollectTime = System.currentTimeMillis();
		if(TextUtils.isEmpty(token))
			token = PersonalConfig.getString(PersonalConfigKey.EXTRA_TOKEN);
		HttpTaskManager.startStringRequest(DataRequestUtils.handleCollectArticleEvent(TAG, token, articleId, hasCollect), 
				JsonParserFactory.parseBaseModel(BaseModel.class), 
				new IResultReceiver() {
			
			@Override
			public void onReceiveResult(int resultCode, Object resultData) {
				if(resultCode==ServerErrorCode.STATUS_SUCCESS){
					BaseModel baseModel = (BaseModel) resultData;
					View contentView = LayoutInflater.from(ArticleDetailActivity.this).inflate(R.layout.collect_dialog, null);
					TextView collectText = (TextView) contentView.findViewById(R.id.tv_collect_state_text);
					if(baseModel!=null && baseModel.getState()==ServerErrorCode.INTERFACE_SUCCESS){
						//操作成功
						if(hasCollect){
							//已经收藏，本次为取消收藏操作
							collectText.setText(R.string.cancel_collect);
						}else{
							//还没有收藏，本次为收藏操作
							collectText.setText(R.string.collect_success);
						}
						int widthandHeight = getResources().getDimensionPixelOffset(R.dimen.collect_dialog_widthandheight);
						popupWindow = new PopupWindow(contentView, widthandHeight, widthandHeight, true);
						popupWindow.showAtLocation(findViewById(R.id.rl_article_detail_parent), Gravity.CENTER | Gravity.CENTER, 0, 0);
						popupWindow.setBackgroundDrawable(new BitmapDrawable());
						popupWindow.setOutsideTouchable(true);
						popupWindow.update();
						Handler mHandler = new Handler();
						mHandler.postDelayed(new Runnable() {
							
							@Override
							public void run() {
								popupWindow.dismiss();
							}
						}, 1500);
						ArticleDetailActivity.this.hasCollect = !ArticleDetailActivity.this.hasCollect;
						ib_collect_article.setSelected(ArticleDetailActivity.this.hasCollect);
					}else if(baseModel!=null && baseModel.getState()==ServerErrorCode.TOKEN_INVALID){
						LoginActivity.startActivity(ArticleDetailActivity.this);
					}
				}else{
                    if (resultData == null) {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), R.string.network_error);
                    } else {
                        ToastUtils.ToastShort(getContext().getApplicationContext(), (String) resultData);
                    }
				}
			}
		});
	}
	
	private void scrollToPointHeight(){
		//获取文章内容布局高度
		float articleContentH = ll_article_content.getHeight();
		//获取相关资讯布局高度
		float interrelatedInfoH = ll_interrelated_info.getHeight();
		if(preScrollY<(articleContentH+interrelatedInfoH)){
			preScrollY = articleContentH+interrelatedInfoH;
			sv_article_detail.scrollTo(0, (int)preScrollY);
		}else{
			preScrollY = 0;
			sv_article_detail.scrollTo(0, 0);
		}
	}
	
	private void handleReviewCountText(int reviewCount){
		if(reviewCount>0){
			tv_amount_review.setVisibility(View.VISIBLE);
			tv_amount_review.setText(reviewCount>99?"99+":String.valueOf(reviewCount));
		}else{
			tv_amount_review.setVisibility(View.GONE);
		}
	}
	
	// 隐藏输入发表回帖状态
    private void hideEditor(View v) {
    	if(!et_review_text.isFocusable())
    		return;
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	ll_send_review.setVisibility(View.GONE);
    	ll_article_detail_footer.setVisibility(View.VISIBLE);
    	et_review_text.clearFocus();
    }

	@Override
	public void onFooterRefresh(ArticlePullToRefreshView view) {
		getReviewListMoreRequest();
	}
}
