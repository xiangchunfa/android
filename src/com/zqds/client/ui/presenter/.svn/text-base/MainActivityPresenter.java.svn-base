/*
 * MainActivityPresenter.java
 * classes : com.qdoc.client.ui.presenter.MainActivityPresenter
 * @author xiangyutian
 * V 1.0.0
 * Create at 2014-7-11 下午11:00:49
 */
package com.qdoc.client.ui.presenter;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffXfermode;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.StateListDrawable;
import android.os.Message;
import android.support.v4.content.LocalBroadcastManager;
import android.util.DisplayMetrics;
import android.util.Pair;
import android.util.TypedValue;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import com.qdoc.client.R;
import com.qdoc.client.helper.Global;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.system.QdocApplication;
import com.qdoc.client.ui.AboutmeActivity;
import com.qdoc.client.ui.BaseActivity;
import com.qdoc.client.ui.ConsultListActivity;
import com.qdoc.client.ui.DiscoveryActivity;
import com.qdoc.client.ui.GrabBillActivity;
import com.qdoc.client.ui.InfomationActivity;
import com.qdoc.client.ui.MainActivity;
import com.qdoc.client.ui.view.WeakReferenceHandler;
import com.qdoc.client.util.LogUtils;

/**
 * com.qdoc.client.ui.presenter.MainActivityPresenter
 * 
 * @author xiangyutian <br/>
 *         create at 2014-7-11 下午11:00:49
 */
public class MainActivityPresenter implements OnCheckedChangeListener, OnClickListener {
    /**
     * TAG
     */
    private static final String TAG = "MainActivityPresenter";

    /**
     * 首页引用
     */
    private final MainActivity mActivity;

    private SwitchTabHandler mSwitchTabHandler;

    /**
     * view
     */
    private ViewGroup mContentView;

    private final RadioButton mTab1;
    private final RadioButton mTab2;
    private final RadioButton mTab3;
    private final RadioButton mTab4;
    private final RadioButton mTab5;

    private final RadioGroup mTab;

    private boolean mNewTipsShow = false;
    private static final int SWITCH_TAB_MSG = 0x102;

    public MainActivityPresenter(MainActivity activity) {
        mActivity = activity;
        mSwitchTabHandler = new SwitchTabHandler(activity);
        mContentView = (ViewGroup) findViewById(R.id.content_view);
        mTab1 = (RadioButton) findViewById(R.id.tv_tab1);
        mTab2 = (RadioButton) findViewById(R.id.tv_tab2);
        mTab3 = ((RadioButton) findViewById(R.id.tv_tab3));
        mTab4 = ((RadioButton) findViewById(R.id.tv_tab4));
        mTab5 = ((RadioButton) findViewById(R.id.tv_tab5));
        mTab1.setOnCheckedChangeListener(this);
        mTab2.setOnCheckedChangeListener(this);
        mTab3.setOnCheckedChangeListener(this);
        mTab4.setOnCheckedChangeListener(this);
        mTab5.setOnCheckedChangeListener(this);

        mTab1.setOnClickListener(this);
        mTab2.setOnClickListener(this);
        mTab3.setOnClickListener(this);
        mTab4.setOnClickListener(this);
        mTab5.setOnClickListener(this);

        mTab = (RadioGroup) findViewById(R.id.rg_tabs);

        initTabs(mActivity.getIntent());
        /*if(!Global.countMap.isEmpty()){
        	notifyTab1Update();
        }*/
    }

    public View findViewById(int id) {
        return mActivity.findViewById(id);
    }

    /**
     * 清除更新小圆点
     */
    public void clearTab1Update() {
        drawUpdateIndicator(mTab1, false, R.drawable.tab1_normal, R.drawable.tab1_press, R.drawable.tab1_selector_bg);
    }

    public void clearTab2Update() {
        drawUpdateIndicator(mTab2, false, R.drawable.tab2_normal, R.drawable.tab2_press, R.drawable.tab2_selector_bg);
    }

    public void clearTab3Update() {
        drawUpdateIndicator(mTab3, false, R.drawable.tab3_normal, R.drawable.tab3_press, R.drawable.tab3_selector_bg);
    }

    public void clearTab4Update() {
        drawUpdateIndicator(mTab4, false, R.drawable.tab4_normal, R.drawable.tab4_press, R.drawable.tab4_selector_bg);
    }

    public void clearTab5Update() {
        drawUpdateIndicator(mTab5, false, R.drawable.tab5_normal, R.drawable.tab5_press, R.drawable.tab5_selector_bg);
    }

    /**
     * 通知tab上显示新数据提示
     */
    public void notifyTab1Update() {
        // final Activity tabActivity = getTabActivity();
        //
        // // 当前focus在热点的话，则不显示红点
        // if ((tabActivity == null) || (tabActivity instanceof
        // ConsultListActivity)) {
        // LogUtils.e(TAG,
        // "notifyTransferListUpdate getTabActivity  tabActivity == null || tabActivity instanceof ConsultListActivity");
        // return;
        // }

        // 绘制红点提示
        drawUpdateIndicator(mTab1, true, R.drawable.tab1_normal, R.drawable.tab1_press, R.drawable.tab1_selector_bg);
    }

    public void notifyTab2Update() {
        // final Activity tabActivity = getTabActivity();
        //
        // // 当前focus在热点的话，则不显示红点
        // if ((tabActivity == null) || (tabActivity instanceof
        // MessageActivity)) {
        // LogUtils.e(TAG,
        // "notifyTransferListUpdate getTabActivity  tabActivity == null || tabActivity instanceof MessageActivity");
        // return;
        // }

        // 绘制红点提示
        drawUpdateIndicator(mTab2, true, R.drawable.tab2_normal, R.drawable.tab2_press, R.drawable.tab2_selector_bg);
    }

    public void notifyTab3Update() {
        // final Activity tabActivity = getTabActivity();
        //
        // // 当前focus在热点的话，则不显示红点
        // if ((tabActivity == null) || (tabActivity instanceof
        // GrabBillActivity)) {
        // LogUtils.e(TAG,
        // "notifyTransferListUpdate getTabActivity  tabActivity == null || tabActivity instanceof GrabBillActivity");
        // return;
        // }

        // 绘制红点提示
        drawUpdateIndicator(mTab3, true, R.drawable.tab3_normal, R.drawable.tab3_press, R.drawable.tab3_selector_bg);
    }

    public void notifyTab4Update() {
        // final Activity tabActivity = getTabActivity();
        //
        // // 当前focus在热点的话，则不显示红点
        // if ((tabActivity == null) || (tabActivity instanceof
        // DiscoveryActivity)) {
        // LogUtils.e(TAG,
        // "notifyTransferListUpdate getTabActivity  tabActivity == null || tabActivity instanceof DiscoveryActivity");
        // return;
        // }

        // 绘制红点提示
        drawUpdateIndicator(mTab4, true, R.drawable.tab4_normal, R.drawable.tab4_press, R.drawable.tab4_selector_bg);
    }

    public void notifyTab5Update() {
        // final Activity tabActivity = getTabActivity();
        //
        // // 当前focus在热点的话，则不显示红点
        // if ((tabActivity == null) || (tabActivity instanceof
        // AboutmeActivity)) {
        // LogUtils.e(TAG,
        // "notifyTransferListUpdate getTabActivity  tabActivity == null || tabActivity instanceof AboutmeActivity");
        // return;
        // }

        // 绘制红点提示
        drawUpdateIndicator(mTab5, true, R.drawable.tab5_normal, R.drawable.tab5_press, R.drawable.tab5_selector_bg);
    }

    /**
     * 设置热点和离线的tab上小红点，显示有新数据
     * 
     * @param view
     *            需要显示小红点的tab
     * @param need2Show
     *            是否有新数据，有显示小红点，没有还原
     */
    private void drawUpdateIndicator(RadioButton view, boolean need2Show, int normalRes, int checkedRes, int selector) {
        final DisplayMetrics dm = new DisplayMetrics();
        mActivity.getWindowManager().getDefaultDisplay().getMetrics(dm);

        final Resources res = mActivity.getResources();

        if (need2Show) {
            final Bitmap indicatorRes = BitmapFactory.decodeResource(res, R.drawable.icon_red_dot);
            final Bitmap appBitmapNormal = BitmapFactory.decodeResource(res, normalRes);
            final Bitmap appBitmapPressed = BitmapFactory.decodeResource(res, checkedRes);

            // final StateListDrawable stateDrawable = new StateListDrawable();
            // final int stateSelected = android.R.attr.state_checked;

            final StateListDrawable stateDrawable = new StateListDrawable();
            final int stateSelected = android.R.attr.state_checked;
            int offset = appBitmapNormal.getWidth()
                    - (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 15, dm);
            final Bitmap newBitmapNormal = drawBitmap(dm, appBitmapNormal, indicatorRes, offset);
            final Bitmap newBitmapPressed = drawBitmap(dm, appBitmapPressed, indicatorRes, offset);

            stateDrawable.addState(new int[] { -stateSelected }, new BitmapDrawable(res, newBitmapNormal));
            stateDrawable.addState(new int[] { stateSelected }, new BitmapDrawable(res, newBitmapPressed));

            view.setCompoundDrawablesWithIntrinsicBounds(null, stateDrawable, null, null);
            view.setPadding(0, (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 0, dm), 0, 0);
        } else {
            view.setCompoundDrawablesWithIntrinsicBounds(null, res.getDrawable(selector), null, null);
            view.setPadding(0, (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, dm), 0, 0);
        }
    }

    /**
     * 画出小红点与前景混合好的图片数据
     * 
     * @param dm
     *            显示尺寸
     * @param background
     *            按钮的图片
     * @param indicator
     *            小圆点
     * @return 混合好的图片
     */
    private Bitmap drawBitmap(DisplayMetrics dm, Bitmap background, Bitmap indicator, int xoffset) {
        final Canvas canvas = new Canvas();
        final int xOffset = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, xoffset, dm);
        final int yOffset = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, dm);

        final int width = background.getScaledWidth(dm) + xOffset;
        final int height = background.getScaledHeight(dm) + yOffset;

        final Bitmap smallBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        canvas.setBitmap(smallBitmap);
        final Paint textPainter = new Paint(Paint.ANTI_ALIAS_FLAG);
        canvas.drawBitmap(background, xOffset / 2, yOffset, textPainter);
        textPainter.setXfermode(new PorterDuffXfermode(Mode.SRC_OVER));
        canvas.drawBitmap(indicator, width - indicator.getScaledWidth(dm), 0, textPainter);
        canvas.save();
        return smallBitmap;
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.tv_tab1:
            	//刷新咨询列表
//            	LocalBroadcastManager.getInstance(QdocApplication.getInstance()).
//            	sendBroadcast(new Intent(AppConstants.REFRESH_CONSULT_LIST_ACTION));
            	clearTab1Update();
                break;
            case R.id.tv_tab2:
                clearTab2Update();
                break;
            case R.id.tv_tab3:
                clearTab3Update();
                break;
            case R.id.tv_tab4:
                clearTab4Update();
                break;
            case R.id.tv_tab5:
                clearTab5Update();
                break;
        }
    }

    /**
     * 处理选中tab
     * 
     * @param intent 启动activity传入
     */
    public void initTabs(Intent intent) {
        final RadioGroup tab = mTab;

        // 是否需要重新设定选中tab,比如从通知栏进入
        final boolean isNeedRecheck = (intent != null) && intent.hasExtra(MainActivity.EXTRA_TAB_INDEX_KEY);
        // 是否已经有选中的tab
        final boolean isDefaultChecked = tab.getCheckedRadioButtonId() != -1;

        int index;
        // mIsNotClick = isNeedRecheck;
        if (isNeedRecheck) {// 需要重新设置选中tab，比如从通知栏吊起时
            index = intent.getIntExtra(MainActivity.EXTRA_TAB_INDEX_KEY, MainActivity.TAB_INDEX_TAB1_ACTIVITY);
        } else if (isDefaultChecked) {// 不需要重新设置tab，并且曾经已经有默认选中tab。无需处理
            return;
        } else {// 初始化
            index = MainActivity.TAB_INDEX_TAB1_ACTIVITY;
        }

        LogUtils.d(TAG, "indexKey=" + index);
        switch (index) {
            case MainActivity.TAB_INDEX_TAB1_ACTIVITY:
                tab.check(R.id.tv_tab1);
                break;
            case MainActivity.TAB_INDEX_TAB2_ACTIVITY:
                tab.check(R.id.tv_tab2);
                break;
            case MainActivity.TAB_INDEX_TAB3_ACTIVITY:
                tab.check(R.id.tv_tab3);
                break;
            case MainActivity.TAB_INDEX_TAB4_ACTIVITY:
                tab.check(R.id.tv_tab4);
                break;
            case MainActivity.TAB_INDEX_TAB5_ACTIVITY:
                tab.check(R.id.tv_tab5);
                break;
        }
    }

    /**
     * @param buttonView
     * @param isChecked
     * @see android.widget.CompoundButton.OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton,
     *      boolean)
     */
    @Override
    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        // TODO Auto-generated method stub
        if (!isChecked) {
            return;
        }

        LogUtils.d(TAG, "onCheckedChange");
        final int id = buttonView.getId();
        switch (id) {
            case R.id.tv_tab1:
                switchTab(ConsultListActivity.class, mContentView);
                break;
            case R.id.tv_tab2:
                //switchTab(MessageActivity.class, mContentView);
            	switchTab(InfomationActivity.class, mContentView);
                break;
            case R.id.tv_tab3:
                switchTab(GrabBillActivity.class, mContentView);
                break;
            case R.id.tv_tab4:
                switchTab(DiscoveryActivity.class, mContentView);
                break;
            case R.id.tv_tab5:
                switchTab(AboutmeActivity.class, mContentView);
                break;
        }
    }

    public void switchTabActivity(Activity target) {
        switchTab(target.getClass(), mContentView);
    }

    /**
     * @return tab选中的activity
     */
    @SuppressWarnings("deprecation")
    public Activity getTabActivity() {
        final int checkedId = mTab.getCheckedRadioButtonId();
        Class<?> clazz = null;

        switch (checkedId) {
            case R.id.tv_tab1:
                clazz = ConsultListActivity.class;
                break;
            case R.id.tv_tab2:
                clazz = InfomationActivity.class;
                break;
            case R.id.tv_tab3:
                clazz = GrabBillActivity.class;
                break;
            case R.id.tv_tab4:
                clazz = DiscoveryActivity.class;
                break;
            case R.id.tv_tab5:
                clazz = AboutmeActivity.class;
                break;
            default:
                clazz = ConsultListActivity.class;
                break;
        }

        return mActivity.getLocalActivityManager().getActivity(clazz.getSimpleName());
    }

    /**
     * 切换tab页
     * 
     * @param clazz
     * @param contentView 左屏或者右屏的内容区域
     */
    private void switchTab(Class<?> clazz, ViewGroup contentView) {
        final Message msg = Message.obtain();
        msg.obj = new Pair<Class<?>, ViewGroup>(clazz, contentView);
        msg.what = SWITCH_TAB_MSG;
        mSwitchTabHandler.sendMessageDelayed(msg, 0);
    }

    @SuppressLint("HandlerLeak")
    private class SwitchTabHandler extends WeakReferenceHandler<MainActivity> {

        public SwitchTabHandler(MainActivity reference) {
            super(reference);
        }

        @SuppressWarnings("deprecation")
        @Override
        protected void handleMessage(MainActivity reference, Message msg) {
            if ((reference != null && reference.isFinishing())) {
                return;
            }
            switch (msg.what) {
                case SWITCH_TAB_MSG:
                    @SuppressWarnings("unchecked")
                    Pair<Class<?>, ViewGroup> data = (Pair<Class<?>, ViewGroup>) msg.obj;
                    if (data == null) {
                        return;
                    }

                    if (!(data.second.getChildAt(0) instanceof RadioGroup)) {
                        data.second.removeViewAt(0);
                    }

                    final Intent intent = new Intent(mActivity.getApplication(), data.first)
                            .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                    final Intent paramsIntent = mActivity.getIntent();

                    final boolean hasExtra = paramsIntent != null
                            && paramsIntent.hasExtra(MainActivity.EXTRA_TAB_INDEX_KEY)
                            && (data.first == convertIndexToClass(paramsIntent.getIntExtra(
                                    MainActivity.EXTRA_TAB_INDEX_KEY, MainActivity.TAB_INDEX_TAB1_ACTIVITY)));

                    // 包含外部push等入口跳转
                    if (hasExtra) {
                        LogUtils.d(TAG, "hasExtra");
                        intent.putExtras(paramsIntent);
                    }

                    LogUtils.d(TAG, "SwitchTabHandler : " + data.first.getSimpleName());

                    data.second.addView(
                            mActivity.getLocalActivityManager().startActivity(data.first.getSimpleName(), intent)
                                    .getDecorView(), 0, new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,
                                    LayoutParams.MATCH_PARENT));

                    if (hasExtra) {
                        mActivity.setIntent(null);
                    }

                    // 维持4个tab对应的activity在BaseActivity的栈内位置
                    final Activity tabActivity = getTabActivity();
                    if (tabActivity == null) {
                        return;
                    }
                    BaseActivity.refreshTopActivity((BaseActivity) tabActivity);
                    break;
            }
        }

        private Class<?> convertIndexToClass(int tabIndex) {
            switch (tabIndex) {
                case MainActivity.TAB_INDEX_TAB1_ACTIVITY:
                    return ConsultListActivity.class;
                case MainActivity.TAB_INDEX_TAB2_ACTIVITY:
                    return InfomationActivity.class;
                case MainActivity.TAB_INDEX_TAB3_ACTIVITY:
                    return GrabBillActivity.class;
                case MainActivity.TAB_INDEX_TAB4_ACTIVITY:
                    return DiscoveryActivity.class;
                case MainActivity.TAB_INDEX_TAB5_ACTIVITY:
                    return AboutmeActivity.class;
                default:
                    break;
            }
            return null;
        }
    }

    /**
     * 为首页提供当前tab区域，用于控制隐藏和显示
     * 
     * @return
     */
    public RadioGroup getTab() {
        return mTab;
    }
}
