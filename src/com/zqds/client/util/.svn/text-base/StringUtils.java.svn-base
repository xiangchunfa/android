package com.qdoc.client.util;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.qdoc.client.R;
import com.qdoc.client.model.AdvanceActivitiesDtoModel;
import com.qdoc.client.system.AppConstants;
import com.qdoc.client.ui.AdDetailActivity;
import com.qdoc.client.ui.AdvanceDetailActivity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.os.Build;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.ImageSpan;
import android.util.Patterns;
import android.view.View;
import android.widget.TextView;

/**
 * String Utils
 * 
 * @author yangbo@qiyi.com
 * @since 2013-11-18
 */
public class StringUtils {
    /**
     * is null or its length is 0 or it is made by space
     * 
     * <pre>
     * isBlank(null) = true;
     * isBlank(&quot;&quot;) = true;
     * isBlank(&quot;  &quot;) = true;
     * isBlank(&quot;a&quot;) = false;
     * isBlank(&quot;a &quot;) = false;
     * isBlank(&quot; a&quot;) = false;
     * isBlank(&quot;a b&quot;) = false;
     * </pre>
     * 
     * @param str
     * @return if string is null or its size is 0 or it is made by space, return
     *         true, else return false.
     */
    public static boolean isBlank(String str) {
        return (str == null || str.trim().length() == 0);
    }

    /**
     * @param str
     * @return if string is null or its size is 0 or it is made by space, return
     *         false, else return true.
     */
    public static boolean isNotBlank(String str) {
        return (str != null && str.trim().length() > 0);
    }

    /**
     * is null or its length is 0
     * 
     * <pre>
     * isEmpty(null) = true;
     * isEmpty(&quot;&quot;) = true;
     * isEmpty(&quot;  &quot;) = false;
     * </pre>
     * 
     * @param str
     * @return if string is null or its size is 0, return true, else return
     *         false.
     */
	public static boolean isEmpty(String value){
		if(value != null && !"".equals(value.trim()) && ! "null".equalsIgnoreCase(value))
			return false;
		return true;
	}
    
	public static boolean isEmpty(CharSequence value){
		if(value != null && !"".equals(value.toString().trim()) && ! "null".equalsIgnoreCase(value.toString()))
			return false;
		return true;
	}
    
    public static boolean isNotEmpty(String str) {
        return !isEmpty(str);
    }

    /**
     * compare two string
     * 
     * <pre>
     * isEquals(null, null) = true;
     * isEquals(null, &quot;abc&quot;) = false;
     * isEquals(&quot;abc&quot;, null) = false;
     * </pre>
     * 
     * @param actual
     * @param expected
     * @return
     * @see ObjectUtils#isEquals(Object, Object)
     */
    public static boolean isEquals(String actual, String expected) {
        return actual == expected || (actual == null ? expected == null : actual.equals(expected));
    }

    /**
     * null string to empty string
     * 
     * <pre>
     * nullStrToEmpty(null) = &quot;&quot;;
     * nullStrToEmpty(&quot;&quot;) = &quot;&quot;;
     * nullStrToEmpty(&quot;aa&quot;) = &quot;aa&quot;;
     * </pre>
     * 
     * @param str
     * @return
     */
    public static String nullStrToEmpty(String str) {
        return (str == null ? "" : str);
    }

    /**
     * capitalize first letter
     * 
     * <pre>
     * capitalizeFirstLetter(null)     =   null;
     * capitalizeFirstLetter("")       =   "";
     * capitalizeFirstLetter("2ab")    =   "2ab"
     * capitalizeFirstLetter("a")      =   "A"
     * capitalizeFirstLetter("ab")     =   "Ab"
     * capitalizeFirstLetter("Abc")    =   "Abc"
     * </pre>
     * 
     * @param str
     * @return
     */
    public static String capitalizeFirstLetter(String str) {
        if (isEmpty(str)) {
            return str;
        }

        char c = str.charAt(0);
        return (!Character.isLetter(c) || Character.isUpperCase(c)) ? str : new StringBuilder(str.length())
                .append(Character.toUpperCase(c)).append(str.substring(1)).toString();
    }

    /**
     * encoded in utf-8
     * 
     * <pre>
     * utf8Encode(null)        =   null
     * utf8Encode("")          =   "";
     * utf8Encode("aa")        =   "aa";
     * utf8Encode("啊啊啊啊")   = "%E5%95%8A%E5%95%8A%E5%95%8A%E5%95%8A";
     * </pre>
     * 
     * @param str
     * @return
     * @throws UnsupportedEncodingException if an error occurs
     */
    public static String utf8Encode(String str) {
        if (!isEmpty(str) && str.getBytes().length != str.length()) {
            try {
                return URLEncoder.encode(str, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException("UnsupportedEncodingException occurred. ", e);
            }
        }
        return str;
    }

    /**
     * encoded in utf-8, if exception, return defultReturn
     * 
     * @param str
     * @param defultReturn
     * @return
     */
    public static String utf8Encode(String str, String defultReturn) {
        if (!isEmpty(str) && str.getBytes().length != str.length()) {
            try {
                return URLEncoder.encode(str, "UTF-8");
            } catch (UnsupportedEncodingException e) {
                return defultReturn;
            }
        }
        return str;
    }

    /**
     * get innerHtml from href
     * 
     * <pre>
     * getHrefInnerHtml(null)                                  = ""
     * getHrefInnerHtml("")                                    = ""
     * getHrefInnerHtml("mp3")                                 = "mp3";
     * getHrefInnerHtml("&lt;a innerHtml&lt;/a&gt;")                    = "&lt;a innerHtml&lt;/a&gt;";
     * getHrefInnerHtml("&lt;a&gt;innerHtml&lt;/a&gt;")                    = "innerHtml";
     * getHrefInnerHtml("&lt;a&lt;a&gt;innerHtml&lt;/a&gt;")                    = "innerHtml";
     * getHrefInnerHtml("&lt;a href="baidu.com"&gt;innerHtml&lt;/a&gt;")               = "innerHtml";
     * getHrefInnerHtml("&lt;a href="baidu.com" title="baidu"&gt;innerHtml&lt;/a&gt;") = "innerHtml";
     * getHrefInnerHtml("   &lt;a&gt;innerHtml&lt;/a&gt;  ")                           = "innerHtml";
     * getHrefInnerHtml("&lt;a&gt;innerHtml&lt;/a&gt;&lt;/a&gt;")                      = "innerHtml";
     * getHrefInnerHtml("jack&lt;a&gt;innerHtml&lt;/a&gt;&lt;/a&gt;")                  = "innerHtml";
     * getHrefInnerHtml("&lt;a&gt;innerHtml1&lt;/a&gt;&lt;a&gt;innerHtml2&lt;/a&gt;")        = "innerHtml2";
     * </pre>
     * 
     * @param href
     * @return <ul>
     *         <li>if href is null, return ""</li>
     *         <li>if not match regx, return source</li>
     *         <li>return the last string that match regx</li>
     *         </ul>
     */
    public static String getHrefInnerHtml(String href) {
        if (isEmpty(href)) {
            return "";
        }

        String hrefReg = ".*<[\\s]*a[\\s]*.*>(.+?)<[\\s]*/a[\\s]*>.*";
        Pattern hrefPattern = Pattern.compile(hrefReg, Pattern.CASE_INSENSITIVE);
        Matcher hrefMatcher = hrefPattern.matcher(href);
        if (hrefMatcher.matches()) {
            return hrefMatcher.group(1);
        }
        return href;
    }

/**
     * process special char in html
     * 
     * <pre>
     * htmlEscapeCharsToString(null) = null;
     * htmlEscapeCharsToString("") = "";
     * htmlEscapeCharsToString("mp3") = "mp3";
     * htmlEscapeCharsToString("mp3&lt;") = "mp3<";
     * htmlEscapeCharsToString("mp3&gt;") = "mp3\>";
     * htmlEscapeCharsToString("mp3&amp;mp4") = "mp3&mp4";
     * htmlEscapeCharsToString("mp3&quot;mp4") = "mp3\"mp4";
     * htmlEscapeCharsToString("mp3&lt;&gt;&amp;&quot;mp4") = "mp3\<\>&\"mp4";
     * </pre>
     * 
     * @param source
     * @return
     */
    public static String htmlEscapeCharsToString(String source) {
        return StringUtils.isEmpty(source) ? source : source.replaceAll("&lt;", "<").replaceAll("&gt;", ">")
                .replaceAll("&amp;", "&").replaceAll("&quot;", "\"");
    }

    /**
     * transform half width char to full width char
     * 
     * <pre>
     * fullWidthToHalfWidth(null) = null;
     * fullWidthToHalfWidth("") = "";
     * fullWidthToHalfWidth(new String(new char[] {12288})) = " ";
     * fullWidthToHalfWidth("！＂＃＄％＆) = "!\"#$%&";
     * </pre>
     * 
     * @param s
     * @return
     */
    public static String fullWidthToHalfWidth(String s) {
        if (isEmpty(s)) {
            return s;
        }

        char[] source = s.toCharArray();
        for (int i = 0; i < source.length; i++) {
            if (source[i] == 12288) {
                source[i] = ' ';
                // } else if (source[i] == 12290) {
                // source[i] = '.';
            } else if (source[i] >= 65281 && source[i] <= 65374) {
                source[i] = (char) (source[i] - 65248);
            } else {
                source[i] = source[i];
            }
        }
        return new String(source);
    }

    /**
     * transform full width char to half width char
     * 
     * <pre>
     * halfWidthToFullWidth(null) = null;
     * halfWidthToFullWidth("") = "";
     * halfWidthToFullWidth(" ") = new String(new char[] {12288});
     * halfWidthToFullWidth("!\"#$%&) = "！＂＃＄％＆";
     * </pre>
     * 
     * @param s
     * @return
     */
    public static String halfWidthToFullWidth(String s) {
        if (isEmpty(s)) {
            return s;
        }

        char[] source = s.toCharArray();
        for (int i = 0; i < source.length; i++) {
            if (source[i] == ' ') {
                source[i] = (char) 12288;
                // } else if (source[i] == '.') {
                // source[i] = (char)12290;
            } else if (source[i] >= 33 && source[i] <= 126) {
                source[i] = (char) (source[i] + 65248);
            } else {
                source[i] = source[i];
            }
        }
        return new String(source);
    }

    /**
     * 是否是数字
     * 
     * @author xiangyutian
     * @param num
     * @return create at 2014-4-21 下午5:11:01
     */
    public static boolean isNumber(String num) {
        for (int i = 0; i < num.length(); i++) {
            if (!Character.isDigit(num.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     * 是否是电话号码
     * 
     * @author kimwang
     * @param phoneNum
     * @return create at 2014-4-29
     */
    public static boolean checkCellPhone(String phoneNum) {
        String check = "^(1[0-9])\\d{9}$";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(phoneNum);
        return matcher.matches();
    }

    /**
     * 是否是字母，数字，中文
     * 
     * @param string
     * @return
     */
    public static boolean checkNickNameIsAlphFigureChinese(String string) {
        String check = "[0-9a-zA-Z\u4e00-\u9fa5]*";
        Pattern regex = Pattern.compile(check, Pattern.CASE_INSENSITIVE);
        Matcher matcher = regex.matcher(string);
        return matcher.matches();
    }

    /**
     * 是否已weibo|官方|微博开头
     * 
     * @param string
     * @return
     */
    public static boolean checkNickNameIsStartByStr(String string) {
        String check = "^[weibo|官方|微博](.)*";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(string);
        return matcher.matches();
    }

    /**
     * 是否包含搜狐|搜狐微博|sohu|souhu
     * 
     * @param string
     * @return
     */
    public static boolean checkNickNameIsContains(String string) {
        String check = "搜狐|搜狐微博|sohu|souhu";
        Pattern regex = Pattern.compile(check, Pattern.CASE_INSENSITIVE);
        Matcher matcher = regex.matcher(string);
        return matcher.find();
    }

    /**
     * 去除空格
     * 
     * @author xiangyutian
     * @param str
     * @return create at 2014-5-6 下午2:16:42
     */
    public static String replaceBlank(String str) {
        String dest = "";
        if (str != null) {
            Pattern p = Pattern.compile("\\s*|\t|\r|\n");
            Matcher m = p.matcher(str);
            dest = m.replaceAll("");
        }
        return dest;
    }

    /**
     * 首字母是否为小写英文字母
     * 
     * @param content
     * @return
     */
    public static boolean checkFirstCharLower(String content) {
        if (StringUtils.isEmpty(content)) {
            return false;
        }
        String check = "[a-z](.)*";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(content);
        return matcher.matches();
    }

    /**
     * 是否符合email格式
     * 
     * @param email
     * @return
     */
    public static boolean checkEmailUserName(String email) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
            return Patterns.EMAIL_ADDRESS.matcher(email).matches();
        } else {
            // This regex is really slow.
            // TODO: remove this branch after updating minSDKVersion to 8.
            String check = "^([a-z0-9A-Z-_]+[-|_|\\.]?)+[a-z0-9A-Z_-]@([a-z0-9A-Z_+]+(-[a-z0-9A-Z_+]+)?\\.)+[a-zA-Z]{2,}$";
            Pattern regex = Pattern.compile(check);
            Matcher matcher = regex.matcher(email);
            return matcher.matches();
        }
    }

    public static boolean checkStringIsForbid(String string) {
        String check = "(Abuse|contact|help|info|jobs|owner|sales|staff|sales|support|www)?+(@sohu.com)";
        Pattern regex = Pattern.compile(check, Pattern.CASE_INSENSITIVE);
        Matcher matcher = regex.matcher(string);
        return matcher.matches();
    }

    public static boolean checkStringIsContains(String string) {
        String check = "admin|master";
        Pattern regex = Pattern.compile(check, Pattern.CASE_INSENSITIVE);
        Matcher matcher = regex.matcher(string);
        return matcher.find();
    }

    public static boolean checkPassportIsValid(String str) {
        if (checkEmailUserName(str)) {
            if (checkStringIsContains(str)) {
                return false;
            }
            if (checkStringIsForbid(str)) {
                return false;
            }
            return true;
        }
        return false;
    }

    public static boolean checkPasswordIsValid(String string) {
        if (StringUtils.isEmpty(string)) {
            return false;
        }

        String check = "[0-9a-zA-Z~!@#$%^&*()\\-+_={}\\[\\];:'\",.<>?/]*";
        Pattern regex = Pattern.compile(check);
        Matcher matcher = regex.matcher(string);
        return matcher.matches();
    }

    public static int stringToInt(String str) {
        if (isEmpty(str)) {
            return 0;
        }

        int ret = 0;
        try {
            ret = Integer.parseInt(str);
        } catch (Exception e) {

        }
        return ret;
    }

    /**
     * apk比较两个版本（string类型）大小的工具
     * 
     * @param sourceVersion
     * @param desVersion
     * @return
     */
    public static int compareVersion(String sourceVersion, String desVersion) {
        String[] source = sourceVersion.split(".");
        String[] des = desVersion.split(".");
        String tempSource = "";
        for (int i = 0; i < source.length; i++) {
            String str = "";
            if (source[i].length() >= 8) {
                str = source[i].substring(0, 8);
            } else {
                str = source[i];
                for (int j = source[i].length(); j < 8; j++) {
                    str = "0" + str;
                }
            }
            tempSource += str;
        }
        String tempDes = "";
        for (int i = 0; i < des.length; i++) {
            String str = "";
            if (des[i].length() >= 8) {
                str = des[i].substring(0, 8);
            } else {
                str = des[i];
                for (int j = des[i].length(); j < 8; j++) {
                    str = "0" + str;
                }
            }
            tempDes += str;
        }
        return tempSource.compareTo(tempDes);
    }
    
    //查找需要高亮处理字符串的索引并且替换<highlight></highlight>标签
    public static void searchKeyWordHighLight(Context context,SpannableStringBuilder spannableStringBuilder, Pattern patten) throws Exception{
    	Matcher matcher = patten.matcher(spannableStringBuilder);
    	int highlight_color = context.getResources().getColor(R.color.keyword_highlight_color);
    	while (matcher.find()) {
    		int start = matcher.start();
    		int end = matcher.end();
    		System.out.println("--------------------->"+matcher.group());
    		int spannableStringBuilderLenght = spannableStringBuilder.length();
			spannableStringBuilder.setSpan(new ForegroundColorSpan(highlight_color), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
			String matcherStr = matcher.group();
			String replaceResultStr = matcherStr.substring("<highlight>".length(), matcherStr.length()-"</highlight>".length());
			spannableStringBuilder.replace(start, end, replaceResultStr);
			if(end<spannableStringBuilderLenght){
				searchKeyWordHighLight(context, spannableStringBuilder, patten);
			}
			break;
    	}
    }
    
    //替换<highlight></highlight>标签
    public static void replaceHighLightTag(SpannableStringBuilder spannableStringBuilder, Pattern patten) throws Exception{
    	Matcher matcher = patten.matcher(spannableStringBuilder);
    	while (matcher.find()) {
    		int start = matcher.start();
    		int end = matcher.end();
    		int spannableStringBuilderLenght = spannableStringBuilder.length();
    		String matcherStr = matcher.group();
    		String replaceResultStr = matcherStr.substring("<highlight>".length(), matcherStr.length()-"</highlight>".length());
    		spannableStringBuilder.replace(start, end, replaceResultStr);
    		if(end<spannableStringBuilderLenght){
    			replaceHighLightTag(spannableStringBuilder, patten);
    		}
    	}
    }
    
    //根据正则表达式，处理需要高亮的字符串
    public static SpannableStringBuilder getHighLightSpinner(Context context, String str){
    	if(TextUtils.isEmpty(str))
    		str = "";
    	SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(str);
    	String regexStr = "<highlight>.+?</highlight>";
    	Pattern sinaPatten = Pattern.compile(regexStr);
    	try {
			searchKeyWordHighLight(context, spannableStringBuilder, sinaPatten);
    		//dealExpression(context, spannableStringBuilder, sinaPatten, 0);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return spannableStringBuilder;
    }

    
    //根据正则表达式，替换高亮标签
    public static SpannableStringBuilder getReplaceHighLightTag(String str){
    	if(TextUtils.isEmpty(str))
    		str = "";
    	SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(str);
    	String regexStr = "<highlight>.+?</highlight>";
    	Pattern sinaPatten = Pattern.compile(regexStr, Pattern.CASE_INSENSITIVE);
    	try {
			replaceHighLightTag(spannableStringBuilder, sinaPatten);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return spannableStringBuilder;
    }
    
	private static void dealExpression(Context context,SpannableStringBuilder spannableString, Pattern patten, int start)throws Exception {
		Matcher matcher = patten.matcher(spannableString);
		int highlight_color = context.getResources().getColor(R.color.keyword_highlight_color);
		while (matcher.find()) {
			String text = matcher.group();
			System.out.println("----------------高亮："+text);
			String key = text.substring("<highlight>".length(), text.length()-"</highlight>".length());
			if (matcher.start() < start) {
				continue;
			}
			/*String value = emojiMap.get(key);
			if (TextUtils.isEmpty(value)) {
				continue;
			}
			int resId = context.getResources().getIdentifier(value, "drawable",
					context.getPackageName());*/
			// 通过上面匹配得到的字符串来生成图片资源id
			// Field field=R.drawable.class.getDeclaredField(value);
			// int resId=Integer.parseInt(field.get(null).toString());
			// 计算该图片名字的长度，也就是要替换的字符串的长度
			int end = matcher.start() + text.length();
			spannableString.setSpan(new ForegroundColorSpan(highlight_color), matcher.start(), end,Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
			spannableString.replace(start, end, key);
			if (end < spannableString.length()) {
				// 如果整个字符串还未验证完，则继续。。
				dealExpression(context, spannableString, patten, end);
			}
			break;
/*			if (resId != 0) {
				Bitmap bitmap = BitmapFactory.decodeResource(
						context.getResources(), resId);
				bitmap = Bitmap.createScaledBitmap(bitmap, 200, 200, true);
				// 通过图片资源id来得到bitmap，用一个ImageSpan来包装
				@SuppressWarnings("deprecation")
				ImageSpan imageSpan = new ImageSpan(bitmap);
				
				// 将该图片替换字符串中规定的位置中
				spannableString.setSpan(imageSpan, matcher.start(), end,
						Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
				if (end < spannableString.length()) {
					// 如果整个字符串还未验证完，则继续。。
					dealExpression(context, spannableString, patten, end);
				}
				break;
			}*/
			/*else{
				spannableString.setSpan("", matcher.start(), end,
						Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
			}*/
		}
	}
	
    
    //根据正则表达式，处理链接地址
    public static SpannableStringBuilder getLinkString(Context context, String str, String url){
    	if(TextUtils.isEmpty(str))
    		str = "";
    	SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(str);
    	String regexStr = "<articleUrl>.+?</articleUrl>";//?表示按照字符前后顺序匹配
    	Pattern sinaPatten = Pattern.compile(regexStr);
    	try {
    		searchKeyWordLink(context, spannableStringBuilder, sinaPatten, url);
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return spannableStringBuilder;
    }
    
    //查找需要链接处理字符串的索引并且替换<articleUrl><articleUrl>标签
    public static void searchKeyWordLink(final Context context,SpannableStringBuilder spannableStringBuilder, Pattern patten, final String url) throws Exception{
    	Matcher matcher = patten.matcher(spannableStringBuilder);
    	int highlight_color = context.getResources().getColor(R.color.keyword_highlight_color);
    	while (matcher.find()) {
    		int start = matcher.start();
    		int end = matcher.end();
    		System.out.println("--------------------->"+matcher.group());
    		int spannableStringBuilderLenght = spannableStringBuilder.length();
			spannableStringBuilder.setSpan(new ForegroundColorSpan(highlight_color), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
			String matcherStr = matcher.group();
			String replaceResultStr = matcherStr.substring("<articleUrl>".length(), matcherStr.length()-"</articleUrl>".length());
			spannableStringBuilder.replace(start, end, replaceResultStr);
			//设置文本链接
			spannableStringBuilder.setSpan(new ClickableSpan()
	         {   
	       	     @Override
	             public void updateDrawState(TextPaint ds) {
	             super.updateDrawState(ds);
	             ds.setUnderlineText(true);      //设置下划线
	             }
	            @Override
	             public void onClick(View widget)
	             {
	            	AdvanceActivitiesDtoModel dataModel = new AdvanceActivitiesDtoModel();
                    dataModel.setTitle(context.getResources().getString(R.string.activity_content_detail));
                    dataModel.setActivityUrl(url);
                    AdvanceDetailActivity.startActivity(context, dataModel);
	             }
	         }, start, start+replaceResultStr.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
			if(end<spannableStringBuilderLenght){
				searchKeyWordLink(context, spannableStringBuilder, patten, url);
			}
			break;
    	}
    }
    
    /**
     * 处理银行卡信息
     */
    public static String dealWithBankNo(String bankNo){
    	if(TextUtils.isEmpty(bankNo) || bankNo.length()<8){
    		return bankNo;
    	}else{
    		String first4No = bankNo.substring(0, 4);
    		String end4No = bankNo.substring(bankNo.length()-4);
    		return first4No+" **** **** "+end4No;
    	}
    }
}
